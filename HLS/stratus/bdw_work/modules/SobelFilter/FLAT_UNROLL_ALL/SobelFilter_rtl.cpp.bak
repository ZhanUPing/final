// Generated by stratus_hls 21.20-p100  (96289.240513)
// Wed May 31 01:15:14 2023
// from ../SobelFilter.cpp
#include "SobelFilter_rtl.h"

struct SobelFilter;
SobelFilter::SobelFilter(sc_module_name name) : sc_module(name) 
    ,i_clk("i_clk")
    ,i_rst("i_rst")
    ,i_rgb_busy("i_rgb_busy")
    ,i_rgb_vld("i_rgb_vld")
    ,i_rgb_data("i_rgb_data")
    ,o_avg_busy("o_avg_busy")
    ,o_avg_vld("o_avg_vld")
    ,o_avg_data("o_avg_data")
    ,o_avg_m_req_m_prev_trig_req("o_avg_m_req_m_prev_trig_req")
    ,SobelFilter_Xor_1Ux1U_1U_1_1_out1("SobelFilter_Xor_1Ux1U_1U_1_1_out1")
    ,o_avg_m_unacked_req("o_avg_m_unacked_req")
    ,SobelFilter_Or_1Ux1U_1U_4_2_out1("SobelFilter_Or_1Ux1U_1U_4_2_out1")
    ,SobelFilter_N_Muxb_1_2_0_4_4_out1("SobelFilter_N_Muxb_1_2_0_4_4_out1")
    ,i_rgb_m_unvalidated_req("i_rgb_m_unvalidated_req")
    ,SobelFilter_gen_busy_r_4_102_i_rgb_gen_busy_i_rgb_m_data_is_invalid_next("SobelFilter_gen_busy_r_4_102_i_rgb_gen_busy_i_rgb_m_data_is_invalid_next")
    ,SobelFilter_gen_busy_r_4_102_gdiv("SobelFilter_gen_busy_r_4_102_gdiv")
    ,SobelFilter_gen_busy_r_4_102_gnew_req("SobelFilter_gen_busy_r_4_102_gnew_req")
    ,global_state_next("global_state_next")
    ,SobelFilter_Minus_32S_32S_4_8_in1("SobelFilter_Minus_32S_32S_4_8_in1")
    ,gs_ctrl_do_filter_h2b841041041ac("gs_ctrl_do_filter_h2b841041041ac")
    ,SobelFilter_Add_32Ux32U_32U_4_7_in1("SobelFilter_Add_32Ux32U_32U_4_7_in1")
    ,gs_ctrl_do_filter_h7fffffffffffe0("gs_ctrl_do_filter_h7fffffffffffe0")
    ,SobelFilter_Minus_32S_32S_4_8_out1("SobelFilter_Minus_32S_32S_4_8_out1")
    ,SobelFilter_Add_32Ux32U_32U_4_7_in2("SobelFilter_Add_32Ux32U_32U_4_7_in2")
    ,gs_ctrl_do_filter_h7fffffffffffe("gs_ctrl_do_filter_h7fffffffffffe")
    ,SobelFilter_Mul_32Sx8S_32S_4_6_out1("SobelFilter_Mul_32Sx8S_32S_4_6_out1")
    ,SobelFilter_Mul_32Sx8S_32S_4_6_in1("SobelFilter_Mul_32Sx8S_32S_4_6_in1")
    ,gs_ctrl_do_filter_h136fbef3440("gs_ctrl_do_filter_h136fbef3440")
    ,SobelFilter_Mul_32Sx8S_32S_4_6_in2("SobelFilter_Mul_32Sx8S_32S_4_6_in2")
    ,gs_ctrl_do_filter_h4536fbef3450("gs_ctrl_do_filter_h4536fbef3450")
    ,s_reg_7_slice("s_reg_7_slice")
    ,s_reg_56("s_reg_56")
    ,s_reg_9("s_reg_9")
    ,s_reg_53("s_reg_53")
    ,s_reg_52("s_reg_52")
    ,s_reg_50("s_reg_50")
    ,s_reg_8("s_reg_8")
    ,s_reg_5("s_reg_5")
    ,s_reg_57("s_reg_57")
    ,s_reg_51("s_reg_51")
    ,s_reg_48("s_reg_48")
    ,s_reg_55("s_reg_55")
    ,s_reg_49("s_reg_49")
    ,s_reg_47("s_reg_47")
    ,s_reg_45("s_reg_45")
    ,s_reg_43("s_reg_43")
    ,s_reg_46("s_reg_46")
    ,s_reg_42("s_reg_42")
    ,s_reg_44("s_reg_44")
    ,s_reg_41("s_reg_41")
    ,s_reg_6("s_reg_6")
    ,s_reg_4("s_reg_4")
    ,s_reg_58("s_reg_58")
    ,s_reg_40("s_reg_40")
    ,s_reg_39("s_reg_39")
    ,s_reg_38("s_reg_38")
    ,s_reg_37("s_reg_37")
    ,s_reg_36("s_reg_36")
    ,s_reg_35("s_reg_35")
    ,s_reg_34("s_reg_34")
    ,s_reg_33("s_reg_33")
    ,s_reg_32("s_reg_32")
    ,s_reg_31("s_reg_31")
    ,s_reg_30("s_reg_30")
    ,s_reg_29("s_reg_29")
    ,s_reg_28("s_reg_28")
    ,s_reg_27("s_reg_27")
    ,s_reg_26("s_reg_26")
    ,s_reg_59("s_reg_59")
    ,s_reg_25("s_reg_25")
    ,s_reg_22("s_reg_22")
    ,s_reg_24("s_reg_24")
    ,s_reg_21("s_reg_21")
    ,s_reg_23("s_reg_23")
    ,s_reg_18("s_reg_18")
    ,s_reg_20("s_reg_20")
    ,s_reg_19("s_reg_19")
    ,s_reg_16("s_reg_16")
    ,s_reg_17("s_reg_17")
    ,s_reg_15("s_reg_15")
    ,s_reg_60("s_reg_60")
    ,s_reg_122("s_reg_122")
    ,s_reg_120("s_reg_120")
    ,s_reg_14("s_reg_14")
    ,s_reg_13("s_reg_13")
    ,s_reg_11("s_reg_11")
    ,s_reg_12("s_reg_12")
    ,s_reg_10("s_reg_10")
    ,SobelFilter_gen_busy_r_4_102_out1("SobelFilter_gen_busy_r_4_102_out1")
    ,SobelFilter_And_1Ux1U_1U_4_100_out1("SobelFilter_And_1Ux1U_1U_4_100_out1")
    ,SobelFilter_Not_1U_1U_1_3_out1("SobelFilter_Not_1U_1U_1_3_out1")
    ,o_avg_m_req_m_trig_req("o_avg_m_req_m_trig_req")
    ,i_rgb_m_busy_req_0("i_rgb_m_busy_req_0")
    ,SobelFilter_Add_32Ux32U_32U_4_7_out1("SobelFilter_Add_32Ux32U_32U_4_7_out1")
    ,global_state("global_state")
    ,stall0("stall0")
{
  SC_METHOD(drive_o_avg_data);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_i_rgb_m_busy_req_0);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_o_avg_m_req_m_trig_req);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_stall0);
  sensitive << ( global_state );
  sensitive << ( SobelFilter_gen_busy_r_4_102_out1 );
  sensitive << ( SobelFilter_And_1Ux1U_1U_4_100_out1 );

  SC_METHOD(drive_s_reg_10);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_11);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_12);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_120);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_122);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_13);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_14);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_15);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_16);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_17);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_18);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_19);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_20);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_21);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_22);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_23);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_24);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_25);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_26);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_27);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_28);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_29);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_30);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_31);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_32);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_33);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_34);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_35);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_36);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_37);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_38);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_39);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_4);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_40);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_41);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_42);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_43);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_44);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_45);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_46);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_47);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_48);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_49);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_5);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_50);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_51);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_52);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_53);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_55);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_56);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_57);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_58);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_59);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_6);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_60);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_7_slice);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_8);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_9);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_SobelFilter_Mul_32Sx8S_32S_4_6_in2);
  sensitive << ( gs_ctrl_do_filter_h4536fbef3450 );
  sensitive << ( s_reg_4 );
  sensitive << ( s_reg_56 );
  sensitive << ( s_reg_10 );
  sensitive << ( s_reg_14 );
  sensitive << ( s_reg_15 );
  sensitive << ( s_reg_19 );
  sensitive << ( s_reg_20 );
  sensitive << ( s_reg_59 );
  sensitive << ( s_reg_21 );
  sensitive << ( s_reg_22 );
  sensitive << ( s_reg_25 );
  sensitive << ( s_reg_26 );
  sensitive << ( s_reg_27 );
  sensitive << ( s_reg_28 );
  sensitive << ( s_reg_29 );
  sensitive << ( s_reg_31 );
  sensitive << ( s_reg_32 );
  sensitive << ( s_reg_33 );
  sensitive << ( s_reg_34 );
  sensitive << ( s_reg_35 );
  sensitive << ( s_reg_37 );
  sensitive << ( s_reg_38 );
  sensitive << ( s_reg_40 );
  sensitive << ( s_reg_43 );
  sensitive << ( s_reg_44 );
  sensitive << ( s_reg_45 );
  sensitive << ( s_reg_50 );

  SC_METHOD(drive_SobelFilter_Mul_32Sx8S_32S_4_6_in1);
  sensitive << ( gs_ctrl_do_filter_h136fbef3440 );

  SC_METHOD(SobelFilter_Mul_32Sx8S_32S_4_6);
  sensitive << ( SobelFilter_Mul_32Sx8S_32S_4_6_in1 );
  sensitive << ( SobelFilter_Mul_32Sx8S_32S_4_6_in2 );

  SC_METHOD(drive_SobelFilter_Add_32Ux32U_32U_4_7_in2);
  sensitive << ( gs_ctrl_do_filter_h7fffffffffffe );
  sensitive << ( s_reg_7_slice );
  sensitive << ( s_reg_52 );
  sensitive << ( o_avg_data );
  sensitive << ( s_reg_120 );
  sensitive << ( SobelFilter_Mul_32Sx8S_32S_4_6_out1 );
  sensitive << ( s_reg_60 );
  sensitive << ( s_reg_16 );
  sensitive << ( s_reg_18 );
  sensitive << ( s_reg_58 );
  sensitive << ( s_reg_42 );
  sensitive << ( s_reg_46 );

  SC_METHOD(drive_SobelFilter_Add_32Ux32U_32U_4_7_in1);
  sensitive << ( gs_ctrl_do_filter_h7fffffffffffe0 );
  sensitive << ( SobelFilter_Mul_32Sx8S_32S_4_6_out1 );
  sensitive << ( SobelFilter_Minus_32S_32S_4_8_out1 );
  sensitive << ( s_reg_122 );
  sensitive << ( s_reg_120 );

  SC_METHOD(SobelFilter_Add_32Ux32U_32U_4_7);
  sensitive << ( SobelFilter_Add_32Ux32U_32U_4_7_in1 );
  sensitive << ( SobelFilter_Add_32Ux32U_32U_4_7_in2 );

  SC_METHOD(drive_SobelFilter_Minus_32S_32S_4_8_in1);
  sensitive << ( gs_ctrl_do_filter_h2b841041041ac );
  sensitive << ( s_reg_9 );
  sensitive << ( s_reg_4 );
  sensitive << ( s_reg_5 );
  sensitive << ( s_reg_8 );
  sensitive << ( s_reg_11 );
  sensitive << ( s_reg_12 );
  sensitive << ( s_reg_17 );
  sensitive << ( s_reg_24 );
  sensitive << ( s_reg_30 );
  sensitive << ( s_reg_36 );
  sensitive << ( s_reg_41 );
  sensitive << ( s_reg_57 );
  sensitive << ( s_reg_55 );
  sensitive << ( s_reg_48 );
  sensitive << ( s_reg_51 );
  sensitive << ( s_reg_53 );

  SC_METHOD(SobelFilter_Minus_32S_32S_4_8);
  sensitive << ( SobelFilter_Minus_32S_32S_4_8_in1 );

  SC_METHOD(drive_global_state);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_global_state_next);
  sensitive << ( global_state );

  SC_METHOD(drive_gs_ctrl_do_filter_h4536fbef3450);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl_do_filter_h136fbef3440);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl_do_filter_h7fffffffffffe);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl_do_filter_h7fffffffffffe0);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl_do_filter_h2b841041041ac);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_i_rgb_busy);
  sensitive << ( SobelFilter_gen_busy_r_4_102_out1 );

  SC_METHOD(SobelFilter_gen_busy_r_4_102_p7);
  sensitive << ( 
  SobelFilter_gen_busy_r_4_102_i_rgb_gen_busy_i_rgb_m_data_is_invalid_next );
  sensitive << ( SobelFilter_gen_busy_r_4_102_gdiv );
  sensitive << ( SobelFilter_gen_busy_r_4_102_gnew_req );

  SC_METHOD(SobelFilter_gen_busy_r_4_102_p6);
  sensitive << ( SobelFilter_gen_busy_r_4_102_gdiv );

  SC_METHOD(SobelFilter_gen_busy_r_4_102_p5);
  sensitive << ( SobelFilter_gen_busy_r_4_102_gnew_req );
  sensitive << ( i_rgb_vld );

  SC_METHOD(SobelFilter_gen_busy_r_4_102_p4);
  sensitive << ( i_rgb_vld );
  sensitive << ( i_rgb_m_unvalidated_req );
  sensitive << ( i_rgb_m_busy_req_0 );

  SC_METHOD(drive_i_rgb_m_unvalidated_req);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(SobelFilter_N_Muxb_1_2_0_4_4);
  sensitive << ( i_rgb_m_busy_req_0 );
  sensitive << ( i_rgb_m_unvalidated_req );
  sensitive << ( i_rgb_vld );

  SC_METHOD(drive_o_avg_vld);
  sensitive << ( SobelFilter_Or_1Ux1U_1U_4_2_out1 );

  SC_METHOD(SobelFilter_Or_1Ux1U_1U_4_2);
  sensitive << ( SobelFilter_Xor_1Ux1U_1U_1_1_out1 );
  sensitive << ( o_avg_m_unacked_req );

  SC_METHOD(drive_o_avg_m_unacked_req);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(SobelFilter_And_1Ux1U_1U_4_100);
  sensitive << ( o_avg_vld );
  sensitive << ( o_avg_busy );

  SC_METHOD(SobelFilter_Xor_1Ux1U_1U_1_1);
  sensitive << ( o_avg_m_req_m_prev_trig_req );
  sensitive << ( o_avg_m_req_m_trig_req );

  SC_METHOD(drive_o_avg_m_req_m_prev_trig_req);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(SobelFilter_Not_1U_1U_1_3);
  sensitive << ( o_avg_m_req_m_trig_req );

}
// resource: regr_en_32
void SobelFilter::drive_o_avg_data(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  default:
    switch( (sc_uint<6>)(global_state.read()) ) {
    case 0ULL: case 3ULL: case 5ULL: case 12ULL: case 18ULL: case 24ULL: case 
    30ULL: case 36ULL: case 41ULL: case 43ULL: case 45ULL: case 47ULL: case 
    50ULL: case 51ULL: 
      o_avg_data = (sc_uint<32> ) (SobelFilter_Add_32Ux32U_32U_4_7_out1.read());
      break;
    }
    break;
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_ss_1
void SobelFilter::drive_i_rgb_m_busy_req_0(){
  if ( (i_rst.read() == 0ULL) ) {
    i_rgb_m_busy_req_0 = 1ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        i_rgb_m_busy_req_0 = 0ULL;
        break;
      case 1ULL: 
        i_rgb_m_busy_req_0 = 1ULL;
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_1
void SobelFilter::drive_o_avg_m_req_m_trig_req(){
  if ( (i_rst.read() == 0ULL) ) {
    o_avg_m_req_m_trig_req = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 50ULL: 
        o_avg_m_req_m_trig_req = (sc_uint<1> ) (SobelFilter_Not_1U_1U_1_3_out1
                                 .read());
        break;
      }
      break;
    }
  }
}
// resource: mux_1bx3i1c
void SobelFilter::drive_stall0(){
  switch( (sc_uint<6>)(global_state.read()) ) {
  default:
    stall0 = 0ULL;
    break;
  case 1ULL: 
    stall0 = (sc_uint<1> )SobelFilter_gen_busy_r_4_102_out1.read();
    break;
  case 51ULL: 
    stall0 = SobelFilter_And_1Ux1U_1U_4_100_out1.read();
    break;
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_10(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_10 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_10 = s_reg_12.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_11(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_11 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_11 = s_reg_13.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_12(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_12 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_12 = s_reg_14.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_120(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_120 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 1ULL: case 6ULL: case 8ULL: case 10ULL: case 14ULL: case 16ULL: case 
      20ULL: case 22ULL: case 26ULL: case 28ULL: case 32ULL: case 34ULL: case 
      38ULL: case 40ULL: case 42ULL: case 48ULL: 
        s_reg_120 = (sc_uint<32> ) (SobelFilter_Add_32Ux32U_32U_4_7_out1.read())
        ;
        break;
      }
      break;
    }
  }
}
// resource: regr_en_32
void SobelFilter::drive_s_reg_122(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  default:
    switch( (sc_uint<6>)(global_state.read()) ) {
    case 2ULL: case 4ULL: case 7ULL: case 9ULL: case 11ULL: case 13ULL: case 
    15ULL: case 17ULL: case 19ULL: case 21ULL: case 23ULL: case 25ULL: case 
    27ULL: case 29ULL: case 31ULL: case 33ULL: case 35ULL: case 37ULL: case 
    39ULL: case 44ULL: case 46ULL: case 49ULL: 
      s_reg_122 = (sc_uint<32> ) (SobelFilter_Add_32Ux32U_32U_4_7_out1.read());
      break;
    }
    break;
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_13(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_13 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_13 = s_reg_60.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_14(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_14 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_14 = s_reg_15.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_15(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_15 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_15 = s_reg_17.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_16(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_16 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_16 = s_reg_19.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_17(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_17 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_17 = s_reg_20.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_18(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_18 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_18 = s_reg_23.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_19(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_19 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_19 = s_reg_18.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_20(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_20 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_20 = s_reg_21.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_21(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_21 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_21 = s_reg_24.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_22(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_22 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_22 = s_reg_25.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_23(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_23 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_23 = s_reg_59.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_24(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_24 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_24 = s_reg_26.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_25(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_25 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_25 = s_reg_27.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_26(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_26 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_26 = s_reg_28.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_27(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_27 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_27 = s_reg_29.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_28(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_28 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_28 = s_reg_30.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_29(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_29 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_29 = s_reg_31.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_30(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_30 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_30 = s_reg_32.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_31(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_31 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_31 = s_reg_33.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_32(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_32 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_32 = s_reg_34.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_33(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_33 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_33 = s_reg_35.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_34(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_34 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_34 = s_reg_36.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_35(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_35 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_35 = s_reg_37.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_36(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_36 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_36 = s_reg_38.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_37(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_37 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_37 = s_reg_39.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_38(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_38 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_38 = s_reg_40.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_39(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_39 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_39 = s_reg_58.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_4(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_4 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_4 = s_reg_6.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_40(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_40 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_40 = s_reg_41.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_41(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_41 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_41 = s_reg_44.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_42(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_42 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_42 = s_reg_46.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_43(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_43 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_43 = s_reg_42.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_44(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_44 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_44 = s_reg_45.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_45(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_45 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_45 = s_reg_47.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_46(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_46 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_46 = s_reg_49.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_47(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_47 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_47 = s_reg_55.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_48(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_48 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_48 = s_reg_51.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_49(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_49 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_49 = s_reg_57.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_5(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_5 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_5 = s_reg_8.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_50(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_50 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_50 = s_reg_52.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_51(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_51 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_51 = s_reg_53.read();
        break;
      }
      break;
    }
  }
}
// resource: mux_32bx2i0c
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_52(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_52 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_52 = (sc_uint<32> ) ((sc_int<31> )s_reg_9.read());
        break;
      case 1ULL: 
        s_reg_52 = i_rgb_data.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_53(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_53 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_53 = s_reg_120.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_55(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_55 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_55 = s_reg_50.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_56(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_56 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_56 = s_reg_10.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_57(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_57 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_57 = s_reg_48.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_58(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_58 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_58 = s_reg_43.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_59(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_59 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_59 = s_reg_22.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_6(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_6 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_6 = s_reg_56.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_60(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_60 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_60 = s_reg_16.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_31
void SobelFilter::drive_s_reg_7_slice(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_7_slice = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_7_slice = (sc_uint<31> )s_reg_4.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_8(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_8 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_8 = s_reg_11.read();
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_32
void SobelFilter::drive_s_reg_9(){
  if ( (i_rst.read() == 0ULL) ) {
    s_reg_9 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state.read()) ) {
      case 0ULL: case 51ULL: 
        s_reg_9 = s_reg_5.read();
        break;
      }
      break;
    }
  }
}
// resource: mux_32bx27i0c
void SobelFilter::drive_SobelFilter_Mul_32Sx8S_32S_4_6_in2(){
  switch( (sc_uint<5>)(gs_ctrl_do_filter_h4536fbef3450.read()) ) {
  default:
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_4.read());
    break;
  case 1ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_56.read());
    break;
  case 2ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_10.read());
    break;
  case 3ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_14.read());
    break;
  case 4ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_15.read());
    break;
  case 5ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_19.read());
    break;
  case 6ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_20.read());
    break;
  case 7ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_59.read());
    break;
  case 8ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_21.read());
    break;
  case 9ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_22.read());
    break;
  case 10ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_25.read());
    break;
  case 11ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_26.read());
    break;
  case 12ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_27.read());
    break;
  case 13ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_28.read());
    break;
  case 14ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_29.read());
    break;
  case 15ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_31.read());
    break;
  case 16ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_32.read());
    break;
  case 17ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_33.read());
    break;
  case 18ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_34.read());
    break;
  case 19ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_35.read());
    break;
  case 20ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_37.read());
    break;
  case 21ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_38.read());
    break;
  case 22ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_40.read());
    break;
  case 23ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_43.read());
    break;
  case 24ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_44.read());
    break;
  case 25ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_45.read());
    break;
  case 26ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in2 = (sc_int<32> ) (s_reg_50.read());
    break;
  }
}
// resource: mux_8bx11i11c
void SobelFilter::drive_SobelFilter_Mul_32Sx8S_32S_4_6_in1(){
  switch( (sc_uint<4>)(gs_ctrl_do_filter_h136fbef3440.read()) ) {
  default:
    SobelFilter_Mul_32Sx8S_32S_4_6_in1 = 3LL;
    break;
  case 1ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in1 = -3LL;
    break;
  case 2ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in1 = 5LL;
    break;
  case 3ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in1 = -5LL;
    break;
  case 4ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in1 = 10LL;
    break;
  case 5ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in1 = -13LL;
    break;
  case 6ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in1 = -12LL;
    break;
  case 7ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in1 = -19LL;
    break;
  case 8ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in1 = 71LL;
    break;
  case 9ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in1 = -24LL;
    break;
  case 10ULL: 
    SobelFilter_Mul_32Sx8S_32S_4_6_in1 = 102LL;
    break;
  }
}
// resource: SobelFilter_Mul_32Sx8S_32S_4  instance: SobelFilter_Mul_32Sx8S_32S_4_6
void SobelFilter::SobelFilter_Mul_32Sx8S_32S_4_6(){
  SobelFilter_Mul_32Sx8S_32S_4_6_out1 = (/*cliff*/sc_int<32>)
                                        SobelFilter_Mul_32Sx8S_32S_4_6_in2
                                        .read() * 
                                        SobelFilter_Mul_32Sx8S_32S_4_6_in1
                                        .read();
}
// resource: mux_32bx12i0c
void SobelFilter::drive_SobelFilter_Add_32Ux32U_32U_4_7_in2(){
  switch( (sc_uint<4>)(gs_ctrl_do_filter_h7fffffffffffe.read()) ) {
  default:
    SobelFilter_Add_32Ux32U_32U_4_7_in2 = ( (sc_uint<32> )(sc_bv<32>)(
                                          (sc_bv<31>)((sc_int<31> )s_reg_7_slice
                                          .read()), 
                                          (sc_bv<1>)(0ULL)) );
    break;
  case 1ULL: 
    SobelFilter_Add_32Ux32U_32U_4_7_in2 = ( (sc_uint<32> )(sc_bv<32>)(
                                          (sc_bv<31>)((sc_int<31> )s_reg_52
                                          .read()), 
                                          (sc_bv<1>)(0ULL)) );
    break;
  case 2ULL: 
    SobelFilter_Add_32Ux32U_32U_4_7_in2 = (sc_uint<32> ) (o_avg_data.read());
    break;
  case 3ULL: 
    SobelFilter_Add_32Ux32U_32U_4_7_in2 = (sc_uint<32> ) (s_reg_120.read());
    break;
  case 4ULL: 
    SobelFilter_Add_32Ux32U_32U_4_7_in2 = (sc_uint<32> ) (
                                          SobelFilter_Mul_32Sx8S_32S_4_6_out1
                                          .read());
    break;
  case 5ULL: 
    SobelFilter_Add_32Ux32U_32U_4_7_in2 = ( (sc_uint<32> )(sc_bv<32>)(
                                          (sc_bv<31>)((sc_int<31> )s_reg_60
                                          .read()), 
                                          (sc_bv<1>)(0ULL)) );
    break;
  case 6ULL: 
    SobelFilter_Add_32Ux32U_32U_4_7_in2 = ( (sc_uint<32> )(sc_bv<32>)(
                                          (sc_bv<30>)((sc_int<30> )s_reg_16
                                          .read()), 
                                          (sc_bv<2>)(0ULL)) );
    break;
  case 7ULL: 
    SobelFilter_Add_32Ux32U_32U_4_7_in2 = ( (sc_uint<32> )(sc_bv<32>)(
                                          (sc_bv<30>)((sc_int<30> )s_reg_18
                                          .read()), 
                                          (sc_bv<2>)(0ULL)) );
    break;
  case 8ULL: 
    SobelFilter_Add_32Ux32U_32U_4_7_in2 = ( (sc_uint<32> )(sc_bv<32>)(
                                          (sc_bv<30>)((sc_int<30> )s_reg_58
                                          .read()), 
                                          (sc_bv<2>)(0ULL)) );
    break;
  case 9ULL: 
    SobelFilter_Add_32Ux32U_32U_4_7_in2 = ( (sc_uint<32> )(sc_bv<32>)(
                                          (sc_bv<30>)((sc_int<30> )s_reg_42
                                          .read()), 
                                          (sc_bv<2>)(0ULL)) );
    break;
  case 10ULL: 
    SobelFilter_Add_32Ux32U_32U_4_7_in2 = ( (sc_uint<32> )(sc_bv<32>)(
                                          (sc_bv<31>)((sc_int<31> )s_reg_46
                                          .read()), 
                                          (sc_bv<1>)(0ULL)) );
    break;
  case 11ULL: 
    SobelFilter_Add_32Ux32U_32U_4_7_in2 = ( (sc_uint<32> )(sc_bv<32>)(
                                          (sc_bv<31>)((sc_int<31> )s_reg_120
                                          .read()), 
                                          (sc_bv<1>)(0ULL)) );
    break;
  }
}
// resource: mux_32bx4i0c
void SobelFilter::drive_SobelFilter_Add_32Ux32U_32U_4_7_in1(){
  switch( (sc_uint<2>)(gs_ctrl_do_filter_h7fffffffffffe0.read()) ) {
  default:
    SobelFilter_Add_32Ux32U_32U_4_7_in1 = (sc_uint<32> ) (
                                          SobelFilter_Mul_32Sx8S_32S_4_6_out1
                                          .read());
    break;
  case 1ULL: 
    SobelFilter_Add_32Ux32U_32U_4_7_in1 = (sc_uint<32> ) (
                                          SobelFilter_Minus_32S_32S_4_8_out1
                                          .read());
    break;
  case 2ULL: 
    SobelFilter_Add_32Ux32U_32U_4_7_in1 = (sc_uint<32> ) (s_reg_122.read());
    break;
  case 3ULL: 
    SobelFilter_Add_32Ux32U_32U_4_7_in1 = (sc_uint<32> ) (s_reg_120.read());
    break;
  }
}
// resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_7
void SobelFilter::SobelFilter_Add_32Ux32U_32U_4_7(){
  SobelFilter_Add_32Ux32U_32U_4_7_out1 = (/*cliff*/sc_uint<32>)(
                                         SobelFilter_Add_32Ux32U_32U_4_7_in2
                                         .read() + 
                                         SobelFilter_Add_32Ux32U_32U_4_7_in1
                                         .read());
}
// resource: mux_32bx16i0c
void SobelFilter::drive_SobelFilter_Minus_32S_32S_4_8_in1(){
  switch( (sc_uint<4>)(gs_ctrl_do_filter_h2b841041041ac.read()) ) {
  default:
    SobelFilter_Minus_32S_32S_4_8_in1 = (sc_int<32> ) (s_reg_9.read());
    break;
  case 1ULL: 
    SobelFilter_Minus_32S_32S_4_8_in1 = (sc_int<32> ) (( (sc_uint<32> )
                                        (sc_bv<32>)((sc_bv<31>)((sc_int<31> )
                                        s_reg_4.read()), 
                                        (sc_bv<1>)(0ULL)) ));
    break;
  case 2ULL: 
    SobelFilter_Minus_32S_32S_4_8_in1 = (sc_int<32> ) (( (sc_uint<32> )
                                        (sc_bv<32>)((sc_bv<31>)((sc_int<31> )
                                        s_reg_5.read()), 
                                        (sc_bv<1>)(0ULL)) ));
    break;
  case 3ULL: 
    SobelFilter_Minus_32S_32S_4_8_in1 = (sc_int<32> ) (( (sc_uint<32> )
                                        (sc_bv<32>)((sc_bv<31>)((sc_int<31> )
                                        s_reg_8.read()), 
                                        (sc_bv<1>)(0ULL)) ));
    break;
  case 4ULL: 
    SobelFilter_Minus_32S_32S_4_8_in1 = (sc_int<32> ) (s_reg_11.read());
    break;
  case 5ULL: 
    SobelFilter_Minus_32S_32S_4_8_in1 = (sc_int<32> ) (s_reg_12.read());
    break;
  case 6ULL: 
    SobelFilter_Minus_32S_32S_4_8_in1 = (sc_int<32> ) (s_reg_17.read());
    break;
  case 7ULL: 
    SobelFilter_Minus_32S_32S_4_8_in1 = (sc_int<32> ) (s_reg_24.read());
    break;
  case 8ULL: 
    SobelFilter_Minus_32S_32S_4_8_in1 = (sc_int<32> ) (s_reg_30.read());
    break;
  case 9ULL: 
    SobelFilter_Minus_32S_32S_4_8_in1 = (sc_int<32> ) (s_reg_36.read());
    break;
  case 10ULL: 
    SobelFilter_Minus_32S_32S_4_8_in1 = (sc_int<32> ) (s_reg_41.read());
    break;
  case 11ULL: 
    SobelFilter_Minus_32S_32S_4_8_in1 = (sc_int<32> ) (s_reg_57.read());
    break;
  case 12ULL: 
    SobelFilter_Minus_32S_32S_4_8_in1 = (sc_int<32> ) (( (sc_uint<32> )
                                        (sc_bv<32>)((sc_bv<31>)((sc_int<31> )
                                        s_reg_55.read()), 
                                        (sc_bv<1>)(0ULL)) ));
    break;
  case 13ULL: 
    SobelFilter_Minus_32S_32S_4_8_in1 = (sc_int<32> ) (( (sc_uint<32> )
                                        (sc_bv<32>)((sc_bv<31>)((sc_int<31> )
                                        s_reg_48.read()), 
                                        (sc_bv<1>)(0ULL)) ));
    break;
  case 14ULL: 
    SobelFilter_Minus_32S_32S_4_8_in1 = (sc_int<32> ) (( (sc_uint<32> )
                                        (sc_bv<32>)((sc_bv<31>)((sc_int<31> )
                                        s_reg_51.read()), 
                                        (sc_bv<1>)(0ULL)) ));
    break;
  case 15ULL: 
    SobelFilter_Minus_32S_32S_4_8_in1 = (sc_int<32> ) (s_reg_53.read());
    break;
  }
}
// resource: SobelFilter_Minus_32S_32S_4  instance: SobelFilter_Minus_32S_32S_4_8
void SobelFilter::SobelFilter_Minus_32S_32S_4_8(){
  SobelFilter_Minus_32S_32S_4_8_out1 = (/*cliff*/sc_int<32>)((sc_int<32> ) - 
                                       SobelFilter_Minus_32S_32S_4_8_in1.read())
  ;
}
// resource: regr_en_sc_6
void SobelFilter::drive_global_state(){
  if ( (i_rst.read() == 0ULL) ) {
    global_state = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      global_state = global_state_next.read();
      break;
    }
  }
}
// resource: mux_6bx2i1c
void SobelFilter::drive_global_state_next(){
  switch( (sc_uint<6>)(global_state.read()) ) {
  default:
    global_state_next = (global_state.read() + 1ULL);
    break;
  case 0ULL: case 51ULL: 
    global_state_next = 1ULL;
    break;
  }
}
// resource: mux_5bx27i27c
// resource: regr_en_sc_5
void SobelFilter::drive_gs_ctrl_do_filter_h4536fbef3450(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl_do_filter_h4536fbef3450 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state_next.read()) ) {
      default:
        gs_ctrl_do_filter_h4536fbef3450 = 0ULL;
        break;
      case 4ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 1ULL;
        break;
      case 6ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 2ULL;
        break;
      case 10ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 3ULL;
        break;
      case 12ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 4ULL;
        break;
      case 13ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 5ULL;
        break;
      case 16ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 6ULL;
        break;
      case 17ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 7ULL;
        break;
      case 18ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 8ULL;
        break;
      case 19ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 9ULL;
        break;
      case 21ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 10ULL;
        break;
      case 22ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 11ULL;
        break;
      case 23ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 12ULL;
        break;
      case 24ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 13ULL;
        break;
      case 25ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 14ULL;
        break;
      case 27ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 15ULL;
        break;
      case 28ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 16ULL;
        break;
      case 29ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 17ULL;
        break;
      case 30ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 18ULL;
        break;
      case 31ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 19ULL;
        break;
      case 33ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 20ULL;
        break;
      case 34ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 21ULL;
        break;
      case 36ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 22ULL;
        break;
      case 37ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 23ULL;
        break;
      case 40ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 24ULL;
        break;
      case 42ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 25ULL;
        break;
      case 46ULL: 
        gs_ctrl_do_filter_h4536fbef3450 = 26ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_4bx11i11c
// resource: regr_en_sc_4
void SobelFilter::drive_gs_ctrl_do_filter_h136fbef3440(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl_do_filter_h136fbef3440 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state_next.read()) ) {
      default:
        gs_ctrl_do_filter_h136fbef3440 = 0ULL;
        break;
      case 6ULL: case 40ULL: 
        gs_ctrl_do_filter_h136fbef3440 = 1ULL;
        break;
      case 10ULL: case 13ULL: case 36ULL: case 37ULL: 
        gs_ctrl_do_filter_h136fbef3440 = 2ULL;
        break;
      case 12ULL: case 17ULL: case 33ULL: case 34ULL: 
        gs_ctrl_do_filter_h136fbef3440 = 3ULL;
        break;
      case 16ULL: case 30ULL: 
        gs_ctrl_do_filter_h136fbef3440 = 4ULL;
        break;
      case 18ULL: case 28ULL: 
        gs_ctrl_do_filter_h136fbef3440 = 5ULL;
        break;
      case 19ULL: case 31ULL: 
        gs_ctrl_do_filter_h136fbef3440 = 6ULL;
        break;
      case 21ULL: case 29ULL: 
        gs_ctrl_do_filter_h136fbef3440 = 7ULL;
        break;
      case 22ULL: case 24ULL: 
        gs_ctrl_do_filter_h136fbef3440 = 8ULL;
        break;
      case 23ULL: case 27ULL: 
        gs_ctrl_do_filter_h136fbef3440 = 9ULL;
        break;
      case 25ULL: 
        gs_ctrl_do_filter_h136fbef3440 = 10ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_4bx12i12c
// resource: regr_en_sc_4
void SobelFilter::drive_gs_ctrl_do_filter_h7fffffffffffe(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl_do_filter_h7fffffffffffe = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state_next.read()) ) {
      default:
        gs_ctrl_do_filter_h7fffffffffffe = 0ULL;
        break;
      case 1ULL: case 48ULL: 
        gs_ctrl_do_filter_h7fffffffffffe = 1ULL;
        break;
      case 2ULL: case 5ULL: case 7ULL: case 14ULL: case 20ULL: case 26ULL: case 
      32ULL: case 38ULL: case 43ULL: case 45ULL: case 47ULL: case 49ULL: 
        gs_ctrl_do_filter_h7fffffffffffe = 2ULL;
        break;
      case 3ULL: case 8ULL: case 44ULL: 
        gs_ctrl_do_filter_h7fffffffffffe = 3ULL;
        break;
      case 4ULL: case 6ULL: case 10ULL: case 12ULL: case 13ULL: case 16ULL: 
      case 17ULL: case 18ULL: case 19ULL: case 21ULL: case 22ULL: case 23ULL: 
      case 24ULL: case 25ULL: case 27ULL: case 28ULL: case 29ULL: case 30ULL: 
      case 31ULL: case 33ULL: case 34ULL: case 36ULL: case 37ULL: case 40ULL: 
      case 42ULL: case 46ULL: 
        gs_ctrl_do_filter_h7fffffffffffe = 4ULL;
        break;
      case 9ULL: 
        gs_ctrl_do_filter_h7fffffffffffe = 5ULL;
        break;
      case 11ULL: 
        gs_ctrl_do_filter_h7fffffffffffe = 6ULL;
        break;
      case 15ULL: 
        gs_ctrl_do_filter_h7fffffffffffe = 7ULL;
        break;
      case 35ULL: 
        gs_ctrl_do_filter_h7fffffffffffe = 8ULL;
        break;
      case 39ULL: 
        gs_ctrl_do_filter_h7fffffffffffe = 9ULL;
        break;
      case 41ULL: 
        gs_ctrl_do_filter_h7fffffffffffe = 10ULL;
        break;
      case 50ULL: 
        gs_ctrl_do_filter_h7fffffffffffe = 11ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_2bx4i4c
// resource: regr_en_sc_2
void SobelFilter::drive_gs_ctrl_do_filter_h7fffffffffffe0(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl_do_filter_h7fffffffffffe0 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state_next.read()) ) {
      default:
        gs_ctrl_do_filter_h7fffffffffffe0 = 0ULL;
        break;
      case 1ULL: case 2ULL: case 3ULL: case 5ULL: case 7ULL: case 8ULL: case 
      14ULL: case 20ULL: case 26ULL: case 32ULL: case 38ULL: case 43ULL: case 
      44ULL: case 45ULL: case 47ULL: case 49ULL: 
        gs_ctrl_do_filter_h7fffffffffffe0 = 1ULL;
        break;
      case 4ULL: case 6ULL: case 9ULL: case 11ULL: case 13ULL: case 15ULL: case 
      17ULL: case 19ULL: case 21ULL: case 23ULL: case 25ULL: case 27ULL: case 
      29ULL: case 31ULL: case 33ULL: case 35ULL: case 37ULL: case 39ULL: case 
      41ULL: case 46ULL: case 48ULL: case 50ULL: 
        gs_ctrl_do_filter_h7fffffffffffe0 = 2ULL;
        break;
      case 10ULL: case 12ULL: case 16ULL: case 18ULL: case 22ULL: case 24ULL: 
      case 28ULL: case 30ULL: case 34ULL: case 36ULL: case 40ULL: case 42ULL: 
        gs_ctrl_do_filter_h7fffffffffffe0 = 3ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_4bx16i16c
// resource: regr_en_sc_4
void SobelFilter::drive_gs_ctrl_do_filter_h2b841041041ac(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl_do_filter_h2b841041041ac = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    default:
      switch( (sc_uint<6>)(global_state_next.read()) ) {
      default:
        gs_ctrl_do_filter_h2b841041041ac = 0ULL;
        break;
      case 2ULL: 
        gs_ctrl_do_filter_h2b841041041ac = 1ULL;
        break;
      case 3ULL: 
        gs_ctrl_do_filter_h2b841041041ac = 2ULL;
        break;
      case 5ULL: 
        gs_ctrl_do_filter_h2b841041041ac = 3ULL;
        break;
      case 7ULL: 
        gs_ctrl_do_filter_h2b841041041ac = 4ULL;
        break;
      case 8ULL: 
        gs_ctrl_do_filter_h2b841041041ac = 5ULL;
        break;
      case 14ULL: 
        gs_ctrl_do_filter_h2b841041041ac = 6ULL;
        break;
      case 20ULL: 
        gs_ctrl_do_filter_h2b841041041ac = 7ULL;
        break;
      case 26ULL: 
        gs_ctrl_do_filter_h2b841041041ac = 8ULL;
        break;
      case 32ULL: 
        gs_ctrl_do_filter_h2b841041041ac = 9ULL;
        break;
      case 38ULL: 
        gs_ctrl_do_filter_h2b841041041ac = 10ULL;
        break;
      case 43ULL: 
        gs_ctrl_do_filter_h2b841041041ac = 11ULL;
        break;
      case 44ULL: 
        gs_ctrl_do_filter_h2b841041041ac = 12ULL;
        break;
      case 45ULL: 
        gs_ctrl_do_filter_h2b841041041ac = 13ULL;
        break;
      case 47ULL: 
        gs_ctrl_do_filter_h2b841041041ac = 14ULL;
        break;
      case 49ULL: 
        gs_ctrl_do_filter_h2b841041041ac = 15ULL;
        break;
      }
      break;
    }
  }
}
void SobelFilter::drive_i_rgb_busy(){
  i_rgb_busy = (sc_uint<1> ) (((/*imp*/sc_uint<1> ) 
               SobelFilter_gen_busy_r_4_102_out1.read().range(2,2)));
}
// resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_102
void SobelFilter::SobelFilter_gen_busy_r_4_102_p7(){
  SobelFilter_gen_busy_r_4_102_out1 = (sc_uint<3> ) (( (sc_biguint<3> )
                                      (sc_bv<3>)((sc_bv<1>)(
                                      SobelFilter_gen_busy_r_4_102_gnew_req
                                      .read()), 
                                      (sc_bv<2>)(( (sc_biguint<2> )(sc_bv<2>)(
                                      (sc_bv<1>)(
                                      SobelFilter_gen_busy_r_4_102_gdiv.read())
                                      , 
                                      (sc_bv<1>)(SobelFilter_gen_busy_r_4_102_i_rgb_gen_busy_i_rgb_m_data_is_invalid_next
                                      .read())) ))) ));
}
// resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_102
void SobelFilter::SobelFilter_gen_busy_r_4_102_p6(){
  SobelFilter_gen_busy_r_4_102_i_rgb_gen_busy_i_rgb_m_data_is_invalid_next = ~(sc_uint<1>)SobelFilter_gen_busy_r_4_102_gdiv.read()
  ;
}
// resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_102
void SobelFilter::SobelFilter_gen_busy_r_4_102_p5(){
  SobelFilter_gen_busy_r_4_102_gdiv = (sc_uint<1> ) ((sc_uint<1> )i_rgb_vld
                                      .read() & !
                                      SobelFilter_gen_busy_r_4_102_gnew_req
                                      .read());
}
// resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_102
void SobelFilter::SobelFilter_gen_busy_r_4_102_p4(){
  SobelFilter_gen_busy_r_4_102_gnew_req = (sc_uint<1> ) ((sc_uint<1> )
                                          i_rgb_m_busy_req_0.read() & ( 
                                          i_rgb_m_unvalidated_req.read() | 
                                          i_rgb_vld.read() ));
}
// resource: regr_ss_1
void SobelFilter::drive_i_rgb_m_unvalidated_req(){
  if ( (i_rst.read() == 0ULL) ) {
    i_rgb_m_unvalidated_req = 1ULL;
  } else {
    i_rgb_m_unvalidated_req = (sc_uint<1> ) (SobelFilter_N_Muxb_1_2_0_4_4_out1
                              .read());
  }
}
// resource: SobelFilter_N_Muxb_1_2_0_4
void SobelFilter::SobelFilter_N_Muxb_1_2_0_4_4(){
  if ( i_rgb_m_busy_req_0.read() ) {
    SobelFilter_N_Muxb_1_2_0_4_4_out1 = (sc_uint<1> ) (i_rgb_m_unvalidated_req
                                        .read());
  } else {
    SobelFilter_N_Muxb_1_2_0_4_4_out1 = (sc_uint<1> ) (i_rgb_vld.read());
  }
}
void SobelFilter::drive_o_avg_vld(){
  o_avg_vld = (sc_uint<1> ) (SobelFilter_Or_1Ux1U_1U_4_2_out1.read());
}
// resource: SobelFilter_Or_1Ux1U_1U_4  instance: SobelFilter_Or_1Ux1U_1U_4_2
void SobelFilter::SobelFilter_Or_1Ux1U_1U_4_2(){
  SobelFilter_Or_1Ux1U_1U_4_2_out1 = (sc_uint<1> ) (o_avg_m_unacked_req.read()
                                      | (sc_uint<1>)
                                     SobelFilter_Xor_1Ux1U_1U_1_1_out1.read());
}
// resource: regr_sc_1
void SobelFilter::drive_o_avg_m_unacked_req(){
  if ( (i_rst.read() == 0ULL) ) {
    o_avg_m_unacked_req = 0ULL;
  } else {
    o_avg_m_unacked_req = (sc_uint<1> ) (SobelFilter_And_1Ux1U_1U_4_100_out1
                          .read());
  }
}
// resource: SobelFilter_And_1Ux1U_1U_4  instance: SobelFilter_And_1Ux1U_1U_4_100
void SobelFilter::SobelFilter_And_1Ux1U_1U_4_100(){
  SobelFilter_And_1Ux1U_1U_4_100_out1 = (sc_uint<1> ) (o_avg_busy.read() & 
                                        o_avg_vld.read());
}
// resource: SobelFilter_Xor_1Ux1U_1U_1  instance: SobelFilter_Xor_1Ux1U_1U_1_1
void SobelFilter::SobelFilter_Xor_1Ux1U_1U_1_1(){
  SobelFilter_Xor_1Ux1U_1U_1_1_out1 = (sc_uint<1> ) (o_avg_m_req_m_trig_req
                                      .read() ^ o_avg_m_req_m_prev_trig_req
                                      .read());
}
// resource: regr_sc_1
void SobelFilter::drive_o_avg_m_req_m_prev_trig_req(){
  if ( (i_rst.read() == 0ULL) ) {
    o_avg_m_req_m_prev_trig_req = 0ULL;
  } else {
    o_avg_m_req_m_prev_trig_req = o_avg_m_req_m_trig_req.read();
  }
}
// resource: SobelFilter_Not_1U_1U_1  instance: SobelFilter_Not_1U_1U_1_3
void SobelFilter::SobelFilter_Not_1U_1U_1_3(){
  SobelFilter_Not_1U_1U_1_3_out1 = !o_avg_m_req_m_trig_req.read();
}
