// Generated by stratus_hls 21.20-p100  (96289.240513)
// Wed May 31 05:35:13 2023
// from ../SobelFilter.cpp

`timescale 1ps / 1ps


module SobelFilter( i_clk, i_rst, i_rgb_busy, i_rgb_vld, i_rgb_data, o_avg_busy, o_avg_vld, o_avg_data );

    input i_clk;
    input i_rst;
    input i_rgb_vld;
    input [31:0] i_rgb_data;
    input o_avg_busy;
    output i_rgb_busy;
    output o_avg_vld;
    output [31:0] o_avg_data;
    reg [31:0] o_avg_data;
    reg o_avg_m_req_m_prev_trig_req;
    reg o_avg_m_unacked_req;
    wire SobelFilter_Xor_1Ux1U_1U_1_1_out1;
    wire SobelFilter_Or_1Ux1U_1U_4_2_out1;
    reg SobelFilter_N_Muxb_1_2_0_4_4_out1;
    reg i_rgb_m_unvalidated_req;
    wire SobelFilter_gen_busy_r_4_102_gnew_req;
    wire SobelFilter_gen_busy_r_4_102_gdiv;
    wire SobelFilter_gen_busy_r_4_102_i_rgb_gen_busy_i_rgb_m_data_is_invalid_next;
    reg[2:0] global_state_next;
    reg[30:0] SobelFilter_Add_32Ux32U_32U_1_75_in2_slice;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_1_74_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_1_74_in1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_1_74_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_1_97_out1;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_1_72_out1;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_1_71_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_1_71_in1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_1_71_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_1_68_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_1_68_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_1_66_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_1_66_in1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_1_66_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_1_65_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_1_48_in2;
    reg[1:0] SobelFilter_Mul_32Sx7U_32S_4_46_in1_slice;
    /*signed*/reg[31:0] SobelFilter_Mul_32Sx7U_32S_4_46_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_1_45_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_1_45_in1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_1_45_in2;
    /*signed*/reg SobelFilter_Mul_32Sx6S_32S_4_44_in1_slice;
    /*signed*/reg[31:0] SobelFilter_Mul_32Sx6S_32S_4_44_in2;
    reg gs_ctrl_do_filter_h8;
    /*signed*/reg[1:0] SobelFilter_Mul_32Sx4S_32S_4_28_in1_slice;
    /*signed*/reg[31:0] SobelFilter_Mul_32Sx4S_32S_4_28_in2;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_27_in1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_27_in2;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx6S_32S_4_44_out1;
    reg[1:0] gs_ctrl_do_filter_he1;
    reg[3:0] SobelFilter_Mul_32Sx4U_32S_4_26_in1;
    /*signed*/reg[31:0] SobelFilter_Mul_32Sx4U_32S_4_26_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_25_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_25_in1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_25_in2;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx7U_32S_4_46_out1;
    /*signed*/reg[5:0] SobelFilter_Mul_32Sx6S_32S_4_24_in1;
    /*signed*/reg[31:0] SobelFilter_Mul_32Sx6S_32S_4_24_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_23_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_23_in1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_23_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_22_out1;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_22_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_21_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_1_20_in2;
    reg gs_ctrl_do_filter_h4;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_19_out1;
    /*signed*/wire[31:0] SobelFilter_Minus_32S_32S_4_18_out1;
    /*signed*/reg[31:0] SobelFilter_Minus_32S_32S_4_18_in1;
    reg[1:0] gs_ctrl_do_filter_hc0;
    /*signed*/reg[4:0] SobelFilter_Mul_32Sx6S_32S_4_17_in1_slice;
    /*signed*/reg[31:0] SobelFilter_Mul_32Sx6S_32S_4_17_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_16_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_16_in1;
    reg gs_ctrl_do_filter_hc;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_16_in2;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx6S_32S_4_24_out1;
    reg[1:0] gs_ctrl_do_filter_he0;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_15_in1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_15_in2;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx6S_32S_4_17_out1;
    /*signed*/wire[31:0] SobelFilter_Minus_32S_32S_4_14_out1;
    /*signed*/wire[31:0] SobelFilter_Minus_32S_32S_4_14_in1;
    /*signed*/reg SobelFilter_Mul_32Sx4S_32S_4_13_in1_slice;
    /*signed*/reg[31:0] SobelFilter_Mul_32Sx4S_32S_4_13_in2;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_12_out1;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_11_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_11_in2;
    /*signed*/wire[31:0] SobelFilter_Minus_32S_32S_4_10_out1;
    /*signed*/reg[31:0] SobelFilter_Minus_32S_32S_4_10_in1;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_9_out1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_9_in1;
    reg[31:0] SobelFilter_Add_32Ux32U_32U_4_9_in2;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx4S_32S_4_13_out1;
    /*signed*/wire[31:0] SobelFilter_Minus_32S_32S_4_8_out1;
    /*signed*/reg[31:0] SobelFilter_Minus_32S_32S_4_8_in1;
    /*signed*/wire[31:0] SobelFilter_Minus_32S_32S_1_7_out1;
    /*signed*/reg[31:0] SobelFilter_Minus_32S_32S_1_7_in1;
    reg[1:0] gs_ctrl_do_filter_he;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx3U_32S_4_6_out1;
    reg[1:0] SobelFilter_Mul_32Sx3U_32S_4_6_in1_slice;
    reg gs_ctrl_do_filter_h2;
    /*signed*/reg[31:0] SobelFilter_Mul_32Sx3U_32S_4_6_in2;
    reg[1:0] gs_ctrl_do_filter_h6;
    reg[30:0] s_reg_9_slice;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx4S_32S_4_28_out1;
    reg[31:0] s_reg_83;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_27_out1;
    reg[31:0] s_reg_82;
    /*signed*/wire[31:0] SobelFilter_Mul_32Sx4U_32S_4_26_out1;
    reg[30:0] s_reg_7_slice;
    reg[31:0] s_reg_56;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_1_20_out1;
    reg[31:0] s_reg_54;
    reg[31:0] s_reg_53;
    reg[31:0] s_reg_81;
    reg[31:0] s_reg_50;
    reg[31:0] s_reg_8;
    reg[31:0] s_reg_5;
    reg[31:0] s_reg_57;
    reg[31:0] s_reg_51;
    reg[31:0] s_reg_48;
    reg[31:0] s_reg_55;
    reg[31:0] s_reg_49;
    reg[31:0] s_reg_47;
    reg[31:0] s_reg_45;
    reg[31:0] s_reg_43;
    reg[31:0] s_reg_46;
    reg[31:0] s_reg_42;
    reg[31:0] s_reg_44;
    reg[31:0] s_reg_41;
    reg[31:0] s_reg_6;
    reg[31:0] s_reg_4;
    reg[31:0] s_reg_58;
    reg[31:0] s_reg_40;
    reg[31:0] s_reg_39;
    reg[31:0] s_reg_38;
    reg[31:0] s_reg_37;
    reg[31:0] s_reg_36;
    reg[31:0] s_reg_35;
    reg[31:0] s_reg_34;
    reg[31:0] s_reg_33;
    reg[31:0] s_reg_32;
    reg[31:0] s_reg_31;
    reg[31:0] s_reg_30;
    reg[31:0] s_reg_29;
    reg[31:0] s_reg_28;
    reg[31:0] s_reg_27;
    reg[31:0] s_reg_26;
    reg[31:0] s_reg_59;
    reg[31:0] s_reg_25;
    reg[31:0] s_reg_22;
    reg[31:0] s_reg_24;
    reg[31:0] s_reg_21;
    reg[31:0] s_reg_23;
    reg[31:0] s_reg_18;
    reg[31:0] s_reg_20;
    reg[31:0] s_reg_19;
    reg[31:0] s_reg_16;
    reg[31:0] s_reg_17;
    reg[31:0] s_reg_15;
    reg[31:0] s_reg_60;
    reg[31:0] s_reg_14;
    reg[31:0] s_reg_13;
    reg[31:0] s_reg_11;
    reg[31:0] s_reg_12;
    reg[31:0] s_reg_10;
    wire SobelFilter_And_1Ux1U_1U_4_100_out1;
    wire[2:0] SobelFilter_gen_busy_r_4_102_out1;
    wire SobelFilter_Not_1U_1U_1_3_out1;
    reg o_avg_m_req_m_trig_req;
    reg i_rgb_m_busy_req_0;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_1_75_out1;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_4_15_out1;
    wire[31:0] SobelFilter_Add_32Ux32U_32U_1_48_out1;
    reg[2:0] global_state;
    reg stall0;

    
    // resource: mux_32bx3i0c
    // resource: regr_en_32
    always @(posedge i_clk)
      begin : drive_o_avg_data
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                3'd1: 
                  begin
                    o_avg_data <= SobelFilter_Add_32Ux32U_32U_1_48_out1;
                  end
                3'd2: 
                  begin
                    o_avg_data <= SobelFilter_Add_32Ux32U_32U_4_15_out1;
                  end
                3'd3: 
                  begin
                    o_avg_data <= SobelFilter_Add_32Ux32U_32U_1_75_out1;
                  end
              endcase
            end
        endcase
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_ss_1
    always @(posedge i_clk)
      begin : drive_i_rgb_m_busy_req_0
        if (i_rst == 1'b0) 
          begin
            i_rgb_m_busy_req_0 <= 1'd1;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd1: 
                      begin
                        i_rgb_m_busy_req_0 <= 1'd0;
                      end
                    3'd2: 
                      begin
                        i_rgb_m_busy_req_0 <= 1'd1;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_o_avg_m_req_m_trig_req
        if (i_rst == 1'b0) 
          begin
            o_avg_m_req_m_trig_req <= 1'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd3: 
                      begin
                        o_avg_m_req_m_trig_req <= SobelFilter_Not_1U_1U_1_3_out1;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx3i1c
    always @(SobelFilter_And_1Ux1U_1U_4_100_out1 or SobelFilter_gen_busy_r_4_102_out1[0] or global_state)
      begin : drive_stall0
        case (global_state) 
          3'd2: 
            begin
              stall0 = SobelFilter_gen_busy_r_4_102_out1[0];
            end
          3'd4: 
            begin
              stall0 = SobelFilter_And_1Ux1U_1U_4_100_out1;
            end
          default: 
            begin
              stall0 = 1'b0;
            end
        endcase
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_10
        if (i_rst == 1'b0) 
          begin
            s_reg_10 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_10 <= s_reg_12;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_11
        if (i_rst == 1'b0) 
          begin
            s_reg_11 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_11 <= s_reg_13;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_12
        if (i_rst == 1'b0) 
          begin
            s_reg_12 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_12 <= s_reg_14;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_13
        if (i_rst == 1'b0) 
          begin
            s_reg_13 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_13 <= s_reg_60;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_14
        if (i_rst == 1'b0) 
          begin
            s_reg_14 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_14 <= s_reg_15;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_15
        if (i_rst == 1'b0) 
          begin
            s_reg_15 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_15 <= s_reg_17;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_16
        if (i_rst == 1'b0) 
          begin
            s_reg_16 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_16 <= s_reg_19;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_17
        if (i_rst == 1'b0) 
          begin
            s_reg_17 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_17 <= s_reg_20;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_18
        if (i_rst == 1'b0) 
          begin
            s_reg_18 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_18 <= s_reg_23;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_19
        if (i_rst == 1'b0) 
          begin
            s_reg_19 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_19 <= s_reg_18;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_20
        if (i_rst == 1'b0) 
          begin
            s_reg_20 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_20 <= s_reg_21;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_21
        if (i_rst == 1'b0) 
          begin
            s_reg_21 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_21 <= s_reg_24;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_22
        if (i_rst == 1'b0) 
          begin
            s_reg_22 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_22 <= s_reg_25;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_23
        if (i_rst == 1'b0) 
          begin
            s_reg_23 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_23 <= s_reg_59;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_24
        if (i_rst == 1'b0) 
          begin
            s_reg_24 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_24 <= s_reg_26;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_25
        if (i_rst == 1'b0) 
          begin
            s_reg_25 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_25 <= s_reg_27;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_26
        if (i_rst == 1'b0) 
          begin
            s_reg_26 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_26 <= s_reg_28;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_27
        if (i_rst == 1'b0) 
          begin
            s_reg_27 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_27 <= s_reg_29;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_28
        if (i_rst == 1'b0) 
          begin
            s_reg_28 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_28 <= s_reg_30;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_29
        if (i_rst == 1'b0) 
          begin
            s_reg_29 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_29 <= s_reg_31;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_30
        if (i_rst == 1'b0) 
          begin
            s_reg_30 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_30 <= s_reg_32;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_31
        if (i_rst == 1'b0) 
          begin
            s_reg_31 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_31 <= s_reg_33;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_32
        if (i_rst == 1'b0) 
          begin
            s_reg_32 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_32 <= s_reg_34;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_33
        if (i_rst == 1'b0) 
          begin
            s_reg_33 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_33 <= s_reg_35;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_34
        if (i_rst == 1'b0) 
          begin
            s_reg_34 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_34 <= s_reg_36;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_35
        if (i_rst == 1'b0) 
          begin
            s_reg_35 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_35 <= s_reg_37;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_36
        if (i_rst == 1'b0) 
          begin
            s_reg_36 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_36 <= s_reg_38;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_37
        if (i_rst == 1'b0) 
          begin
            s_reg_37 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_37 <= s_reg_39;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_38
        if (i_rst == 1'b0) 
          begin
            s_reg_38 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_38 <= s_reg_40;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_39
        if (i_rst == 1'b0) 
          begin
            s_reg_39 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_39 <= s_reg_58;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_4
        if (i_rst == 1'b0) 
          begin
            s_reg_4 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_4 <= s_reg_6;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_40
        if (i_rst == 1'b0) 
          begin
            s_reg_40 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_40 <= s_reg_41;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_41
        if (i_rst == 1'b0) 
          begin
            s_reg_41 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_41 <= s_reg_44;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_42
        if (i_rst == 1'b0) 
          begin
            s_reg_42 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_42 <= s_reg_46;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_43
        if (i_rst == 1'b0) 
          begin
            s_reg_43 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_43 <= s_reg_42;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_44
        if (i_rst == 1'b0) 
          begin
            s_reg_44 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_44 <= s_reg_45;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_45
        if (i_rst == 1'b0) 
          begin
            s_reg_45 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_45 <= s_reg_47;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_46
        if (i_rst == 1'b0) 
          begin
            s_reg_46 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_46 <= s_reg_49;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_47
        if (i_rst == 1'b0) 
          begin
            s_reg_47 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_47 <= s_reg_55;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_48
        if (i_rst == 1'b0) 
          begin
            s_reg_48 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_48 <= s_reg_51;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_49
        if (i_rst == 1'b0) 
          begin
            s_reg_49 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_49 <= s_reg_57;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_5
        if (i_rst == 1'b0) 
          begin
            s_reg_5 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_5 <= s_reg_8;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_50
        if (i_rst == 1'b0) 
          begin
            s_reg_50 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd4: 
                      begin
                        s_reg_50 <= s_reg_81;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_51
        if (i_rst == 1'b0) 
          begin
            s_reg_51 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_51 <= s_reg_53;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_53
        if (i_rst == 1'b0) 
          begin
            s_reg_53 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_53 <= s_reg_54;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_32bx2i0c
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_54
        if (i_rst == 1'b0) 
          begin
            s_reg_54 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_54 <= SobelFilter_Add_32Ux32U_32U_1_20_out1;
                      end
                    3'd2: 
                      begin
                        s_reg_54 <= SobelFilter_Add_32Ux32U_32U_1_75_out1;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_55
        if (i_rst == 1'b0) 
          begin
            s_reg_55 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_55 <= s_reg_50;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_56
        if (i_rst == 1'b0) 
          begin
            s_reg_56 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_56 <= s_reg_10;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_57
        if (i_rst == 1'b0) 
          begin
            s_reg_57 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_57 <= s_reg_48;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_58
        if (i_rst == 1'b0) 
          begin
            s_reg_58 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_58 <= s_reg_43;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_59
        if (i_rst == 1'b0) 
          begin
            s_reg_59 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_59 <= s_reg_22;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_6
        if (i_rst == 1'b0) 
          begin
            s_reg_6 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_6 <= s_reg_56;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_60
        if (i_rst == 1'b0) 
          begin
            s_reg_60 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_60 <= s_reg_16;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_31
    always @(posedge i_clk)
      begin : drive_s_reg_7_slice
        if (i_rst == 1'b0) 
          begin
            s_reg_7_slice <= 31'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_7_slice <= s_reg_4[30:0];
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: regr_en_sc_32
    always @(posedge i_clk)
      begin : drive_s_reg_8
        if (i_rst == 1'b0) 
          begin
            s_reg_8 <= 32'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_8 <= s_reg_11;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_32bx2i0c
    // resource: regr_en_32
    always @(posedge i_clk)
      begin : drive_s_reg_81
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                3'd0, 3'd1, 3'd4: 
                  begin
                    s_reg_81 <= SobelFilter_Mul_32Sx4U_32S_4_26_out1;
                  end
                3'd2: 
                  begin
                    s_reg_81 <= i_rgb_data;
                  end
              endcase
            end
        endcase
      end
    
    // resource: regr_en_32
    always @(posedge i_clk)
      begin : drive_s_reg_82
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                3'd0, 3'd1, 3'd4: 
                  begin
                    s_reg_82 <= SobelFilter_Add_32Ux32U_32U_4_27_out1;
                  end
              endcase
            end
        endcase
      end
    
    // resource: regr_en_32
    always @(posedge i_clk)
      begin : drive_s_reg_83
        case (stall0) 
          1'b1: 
            begin
            end
          default: 
            begin
              case (global_state) 
                3'd0, 3'd1, 3'd4: 
                  begin
                    s_reg_83 <= SobelFilter_Mul_32Sx4S_32S_4_28_out1;
                  end
              endcase
            end
        endcase
      end
    
    // resource: regr_en_sc_31
    always @(posedge i_clk)
      begin : drive_s_reg_9_slice
        if (i_rst == 1'b0) 
          begin
            s_reg_9_slice <= 31'd0000000000;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state) 
                    3'd0, 3'd4: 
                      begin
                        s_reg_9_slice <= s_reg_5[30:0];
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_32bx3i0c
    always @(s_reg_14 or s_reg_4 or s_reg_45 or gs_ctrl_do_filter_h6)
      begin : drive_SobelFilter_Mul_32Sx3U_32S_4_6_in2
        case (gs_ctrl_do_filter_h6) 
          2'd1: 
            begin
              SobelFilter_Mul_32Sx3U_32S_4_6_in2 = s_reg_14;
            end
          2'd2: 
            begin
              SobelFilter_Mul_32Sx3U_32S_4_6_in2 = s_reg_45;
            end
          default: 
            begin
              SobelFilter_Mul_32Sx3U_32S_4_6_in2 = s_reg_4;
            end
        endcase
      end
    
    // resource: mux_2bx2i2c
    always @(gs_ctrl_do_filter_h2)
      begin : drive_SobelFilter_Mul_32Sx3U_32S_4_6_in1_slice
        if (gs_ctrl_do_filter_h2) 
          begin
            SobelFilter_Mul_32Sx3U_32S_4_6_in1_slice = 2'd2;
          end 
        else 
          begin
            SobelFilter_Mul_32Sx3U_32S_4_6_in1_slice = 2'd1;
          end
      end
    
    // resource: SobelFilter_Mul_32Sx3U_32S_4  instance: SobelFilter_Mul_32Sx3U_32S_4_6
    assign SobelFilter_Mul_32Sx3U_32S_4_6_out1 = SobelFilter_Mul_32Sx3U_32S_4_6_in2 * {{29'b00000000000000000000000000000, SobelFilter_Mul_32Sx3U_32S_4_6_in1_slice}, 1'b1};
    
    // resource: mux_32bx4i0c
    always @(s_reg_12 or s_reg_30 or s_reg_5 or s_reg_57 or gs_ctrl_do_filter_he)
      begin : drive_SobelFilter_Minus_32S_32S_1_7_in1
        case (gs_ctrl_do_filter_he) 
          2'd1: 
            begin
              SobelFilter_Minus_32S_32S_1_7_in1 = s_reg_12;
            end
          2'd2: 
            begin
              SobelFilter_Minus_32S_32S_1_7_in1 = s_reg_30;
            end
          2'd3: 
            begin
              SobelFilter_Minus_32S_32S_1_7_in1 = s_reg_57;
            end
          default: 
            begin
              SobelFilter_Minus_32S_32S_1_7_in1 = s_reg_5;
            end
        endcase
      end
    
    // resource: SobelFilter_Minus_32S_32S_1  instance: SobelFilter_Minus_32S_32S_1_7
    assign SobelFilter_Minus_32S_32S_1_7_out1 = -SobelFilter_Minus_32S_32S_1_7_in1;
    
    // resource: mux_32bx4i0c
    always @(s_reg_17 or s_reg_48[30:0] or s_reg_55[30:0] or s_reg_6[30:0] or gs_ctrl_do_filter_he)
      begin : drive_SobelFilter_Minus_32S_32S_4_8_in1
        case (gs_ctrl_do_filter_he) 
          2'd1: 
            begin
              SobelFilter_Minus_32S_32S_4_8_in1 = s_reg_17;
            end
          2'd2: 
            begin
              SobelFilter_Minus_32S_32S_4_8_in1 = {s_reg_55[30:0], 1'b0};
            end
          2'd3: 
            begin
              SobelFilter_Minus_32S_32S_4_8_in1 = {s_reg_48[30:0], 1'b0};
            end
          default: 
            begin
              SobelFilter_Minus_32S_32S_4_8_in1 = {s_reg_6[30:0], 1'b0};
            end
        endcase
      end
    
    // resource: SobelFilter_Minus_32S_32S_4  instance: SobelFilter_Minus_32S_32S_4_8
    assign SobelFilter_Minus_32S_32S_4_8_out1 = -SobelFilter_Minus_32S_32S_4_8_in1;
    
    // resource: mux_32bx2i0c
    always @(SobelFilter_Mul_32Sx4S_32S_4_13_out1 or gs_ctrl_do_filter_h2 or s_reg_7_slice)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_9_in2
        if (gs_ctrl_do_filter_h2) 
          begin
            SobelFilter_Add_32Ux32U_32U_4_9_in2 = SobelFilter_Mul_32Sx4S_32S_4_13_out1;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_4_9_in2 = {s_reg_7_slice, 1'b0};
          end
      end
    
    // resource: mux_32bx2i0c
    always @(SobelFilter_Mul_32Sx3U_32S_4_6_out1 or SobelFilter_Add_32Ux32U_32U_4_15_out1 or gs_ctrl_do_filter_h2)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_9_in1
        if (gs_ctrl_do_filter_h2) 
          begin
            SobelFilter_Add_32Ux32U_32U_4_9_in1 = SobelFilter_Add_32Ux32U_32U_4_15_out1;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_4_9_in1 = SobelFilter_Mul_32Sx3U_32S_4_6_out1;
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_9
    assign SobelFilter_Add_32Ux32U_32U_4_9_out1 = SobelFilter_Add_32Ux32U_32U_4_9_in2 + SobelFilter_Add_32Ux32U_32U_4_9_in1;
    
    // resource: mux_32bx4i0c
    always @(s_reg_24 or s_reg_36 or s_reg_51[30:0] or s_reg_8[30:0] or gs_ctrl_do_filter_he)
      begin : drive_SobelFilter_Minus_32S_32S_4_10_in1
        case (gs_ctrl_do_filter_he) 
          2'd1: 
            begin
              SobelFilter_Minus_32S_32S_4_10_in1 = s_reg_24;
            end
          2'd2: 
            begin
              SobelFilter_Minus_32S_32S_4_10_in1 = s_reg_36;
            end
          2'd3: 
            begin
              SobelFilter_Minus_32S_32S_4_10_in1 = {s_reg_51[30:0], 1'b0};
            end
          default: 
            begin
              SobelFilter_Minus_32S_32S_4_10_in1 = {s_reg_8[30:0], 1'b0};
            end
        endcase
      end
    
    // resource: SobelFilter_Minus_32S_32S_4  instance: SobelFilter_Minus_32S_32S_4_10
    assign SobelFilter_Minus_32S_32S_4_10_out1 = -SobelFilter_Minus_32S_32S_4_10_in1;
    
    // resource: mux_32bx2i0c
    always @(s_reg_54 or gs_ctrl_do_filter_h2 or s_reg_9_slice)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_11_in2
        if (gs_ctrl_do_filter_h2) 
          begin
            SobelFilter_Add_32Ux32U_32U_4_11_in2 = s_reg_54;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_4_11_in2 = {s_reg_9_slice, 1'b0};
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_11
    assign SobelFilter_Add_32Ux32U_32U_4_11_out1 = SobelFilter_Add_32Ux32U_32U_4_11_in2 + SobelFilter_Minus_32S_32S_1_7_out1;
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_12
    assign SobelFilter_Add_32Ux32U_32U_4_12_out1 = SobelFilter_Add_32Ux32U_32U_4_9_out1 + SobelFilter_Minus_32S_32S_4_8_out1;
    
    // resource: mux_32bx3i0c
    always @(s_reg_10 or s_reg_15 or s_reg_50 or gs_ctrl_do_filter_h6)
      begin : drive_SobelFilter_Mul_32Sx4S_32S_4_13_in2
        case (gs_ctrl_do_filter_h6) 
          2'd1: 
            begin
              SobelFilter_Mul_32Sx4S_32S_4_13_in2 = s_reg_15;
            end
          2'd2: 
            begin
              SobelFilter_Mul_32Sx4S_32S_4_13_in2 = s_reg_50;
            end
          default: 
            begin
              SobelFilter_Mul_32Sx4S_32S_4_13_in2 = s_reg_10;
            end
        endcase
      end
    
    // resource: mux_1bx2i2c
    always @(gs_ctrl_do_filter_h2)
      begin : drive_SobelFilter_Mul_32Sx4S_32S_4_13_in1_slice
        if (gs_ctrl_do_filter_h2) 
          begin
            SobelFilter_Mul_32Sx4S_32S_4_13_in1_slice = 1'b1;
          end 
        else 
          begin
            SobelFilter_Mul_32Sx4S_32S_4_13_in1_slice = 1'b0;
          end
      end
    
    // resource: SobelFilter_Mul_32Sx4S_32S_4  instance: SobelFilter_Mul_32Sx4S_32S_4_13
    assign SobelFilter_Mul_32Sx4S_32S_4_13_out1 = SobelFilter_Mul_32Sx4S_32S_4_13_in2 * {{ 29 {SobelFilter_Mul_32Sx4S_32S_4_13_in1_slice}}, 3'd3};
    
    // instance: drive_SobelFilter_Minus_32S_32S_4_14_in1
    assign SobelFilter_Minus_32S_32S_4_14_in1 = {s_reg_11[30:0], 1'b0};
    
    // resource: SobelFilter_Minus_32S_32S_4  instance: SobelFilter_Minus_32S_32S_4_14
    assign SobelFilter_Minus_32S_32S_4_14_out1 = -SobelFilter_Minus_32S_32S_4_14_in1;
    
    // resource: mux_32bx3i0c
    always @(SobelFilter_Mul_32Sx3U_32S_4_6_out1 or SobelFilter_Add_32Ux32U_32U_4_11_out1 or SobelFilter_Mul_32Sx6S_32S_4_17_out1 or gs_ctrl_do_filter_h6)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_15_in2
        case (gs_ctrl_do_filter_h6) 
          2'd1: 
            begin
              SobelFilter_Add_32Ux32U_32U_4_15_in2 = SobelFilter_Mul_32Sx3U_32S_4_6_out1;
            end
          2'd2: 
            begin
              SobelFilter_Add_32Ux32U_32U_4_15_in2 = SobelFilter_Mul_32Sx6S_32S_4_17_out1;
            end
          default: 
            begin
              SobelFilter_Add_32Ux32U_32U_4_15_in2 = SobelFilter_Add_32Ux32U_32U_4_11_out1;
            end
        endcase
      end
    
    // resource: mux_32bx3i0c
    always @(s_reg_82 or SobelFilter_Minus_32S_32S_4_10_out1 or SobelFilter_Add_32Ux32U_32U_4_11_out1 or gs_ctrl_do_filter_h6)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_15_in1
        case (gs_ctrl_do_filter_h6) 
          2'd1: 
            begin
              SobelFilter_Add_32Ux32U_32U_4_15_in1 = SobelFilter_Add_32Ux32U_32U_4_11_out1;
            end
          2'd2: 
            begin
              SobelFilter_Add_32Ux32U_32U_4_15_in1 = s_reg_82;
            end
          default: 
            begin
              SobelFilter_Add_32Ux32U_32U_4_15_in1 = SobelFilter_Minus_32S_32S_4_10_out1;
            end
        endcase
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_15
    assign SobelFilter_Add_32Ux32U_32U_4_15_out1 = SobelFilter_Add_32Ux32U_32U_4_15_in2 + SobelFilter_Add_32Ux32U_32U_4_15_in1;
    
    // resource: mux_32bx3i0c
    always @(s_reg_81 or SobelFilter_Mul_32Sx4S_32S_4_13_out1 or SobelFilter_Mul_32Sx6S_32S_4_24_out1 or gs_ctrl_do_filter_he0)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_16_in2
        case (gs_ctrl_do_filter_he0) 
          2'd1: 
            begin
              SobelFilter_Add_32Ux32U_32U_4_16_in2 = s_reg_81;
            end
          2'd2: 
            begin
              SobelFilter_Add_32Ux32U_32U_4_16_in2 = SobelFilter_Mul_32Sx6S_32S_4_24_out1;
            end
          default: 
            begin
              SobelFilter_Add_32Ux32U_32U_4_16_in2 = SobelFilter_Mul_32Sx4S_32S_4_13_out1;
            end
        endcase
      end
    
    // resource: mux_32bx2i0c
    always @(SobelFilter_Add_32Ux32U_32U_4_12_out1 or SobelFilter_Add_32Ux32U_32U_4_27_out1 or gs_ctrl_do_filter_hc)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_16_in1
        if (gs_ctrl_do_filter_hc) 
          begin
            SobelFilter_Add_32Ux32U_32U_4_16_in1 = SobelFilter_Add_32Ux32U_32U_4_27_out1;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_4_16_in1 = SobelFilter_Add_32Ux32U_32U_4_12_out1;
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_16
    assign SobelFilter_Add_32Ux32U_32U_4_16_out1 = SobelFilter_Add_32Ux32U_32U_4_16_in2 + SobelFilter_Add_32Ux32U_32U_4_16_in1;
    
    // resource: mux_32bx4i0c
    always @(s_reg_12 or s_reg_21 or s_reg_27 or s_reg_35 or gs_ctrl_do_filter_he)
      begin : drive_SobelFilter_Mul_32Sx6S_32S_4_17_in2
        case (gs_ctrl_do_filter_he) 
          2'd1: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_17_in2 = s_reg_21;
            end
          2'd2: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_17_in2 = s_reg_27;
            end
          2'd3: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_17_in2 = s_reg_35;
            end
          default: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_17_in2 = s_reg_12;
            end
        endcase
      end
    
    // resource: mux_5bx4i4c
    always @(gs_ctrl_do_filter_he)
      begin : drive_SobelFilter_Mul_32Sx6S_32S_4_17_in1_slice
        case (gs_ctrl_do_filter_he) 
          2'd1: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_17_in1_slice = 5'd19;
            end
          2'd2: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_17_in1_slice = 5'd08;
            end
          2'd3: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_17_in1_slice = 5'd20;
            end
          default: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_17_in1_slice = 5'd29;
            end
        endcase
      end
    
    // resource: SobelFilter_Mul_32Sx6S_32S_4  instance: SobelFilter_Mul_32Sx6S_32S_4_17
    assign SobelFilter_Mul_32Sx6S_32S_4_17_out1 = SobelFilter_Mul_32Sx6S_32S_4_17_in2 * {27'd134217727, SobelFilter_Mul_32Sx6S_32S_4_17_in1_slice};
    
    // resource: mux_32bx3i0c
    always @(s_reg_13 or s_reg_41 or s_reg_53 or gs_ctrl_do_filter_hc0)
      begin : drive_SobelFilter_Minus_32S_32S_4_18_in1
        case (gs_ctrl_do_filter_hc0) 
          2'd1: 
            begin
              SobelFilter_Minus_32S_32S_4_18_in1 = s_reg_41;
            end
          2'd2: 
            begin
              SobelFilter_Minus_32S_32S_4_18_in1 = s_reg_53;
            end
          default: 
            begin
              SobelFilter_Minus_32S_32S_4_18_in1 = s_reg_13;
            end
        endcase
      end
    
    // resource: SobelFilter_Minus_32S_32S_4  instance: SobelFilter_Minus_32S_32S_4_18
    assign SobelFilter_Minus_32S_32S_4_18_out1 = -SobelFilter_Minus_32S_32S_4_18_in1;
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_19
    assign SobelFilter_Add_32Ux32U_32U_4_19_out1 = SobelFilter_Add_32Ux32U_32U_4_15_out1 + SobelFilter_Minus_32S_32S_4_14_out1;
    
    // resource: mux_32bx2i0c
    always @(s_reg_81 or SobelFilter_Mul_32Sx6S_32S_4_17_out1 or gs_ctrl_do_filter_h4)
      begin : drive_SobelFilter_Add_32Ux32U_32U_1_20_in2
        if (gs_ctrl_do_filter_h4) 
          begin
            SobelFilter_Add_32Ux32U_32U_1_20_in2 = s_reg_81;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_1_20_in2 = SobelFilter_Mul_32Sx6S_32S_4_17_out1;
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_1  instance: SobelFilter_Add_32Ux32U_32U_1_20
    assign SobelFilter_Add_32Ux32U_32U_1_20_out1 = SobelFilter_Add_32Ux32U_32U_1_20_in2 + SobelFilter_Add_32Ux32U_32U_4_16_out1;
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_21
    assign SobelFilter_Add_32Ux32U_32U_4_21_out1 = SobelFilter_Add_32Ux32U_32U_4_19_out1 + SobelFilter_Minus_32S_32S_4_18_out1;
    
    // instance: drive_SobelFilter_Add_32Ux32U_32U_4_22_in2
    assign SobelFilter_Add_32Ux32U_32U_4_22_in2 = {s_reg_16[30:0], 1'b0};
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_22
    assign SobelFilter_Add_32Ux32U_32U_4_22_out1 = SobelFilter_Add_32Ux32U_32U_4_22_in2 + SobelFilter_Add_32Ux32U_32U_4_21_out1;
    
    // resource: mux_32bx2i0c
    always @(s_reg_19[29:0] or s_reg_83 or gs_ctrl_do_filter_h2)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_23_in2
        if (gs_ctrl_do_filter_h2) 
          begin
            SobelFilter_Add_32Ux32U_32U_4_23_in2 = s_reg_83;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_4_23_in2 = {s_reg_19[29:0], 2'd0};
          end
      end
    
    // resource: mux_32bx2i0c
    always @(s_reg_82 or SobelFilter_Add_32Ux32U_32U_4_22_out1 or gs_ctrl_do_filter_h2)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_23_in1
        if (gs_ctrl_do_filter_h2) 
          begin
            SobelFilter_Add_32Ux32U_32U_4_23_in1 = s_reg_82;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_4_23_in1 = SobelFilter_Add_32Ux32U_32U_4_22_out1;
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_23
    assign SobelFilter_Add_32Ux32U_32U_4_23_out1 = SobelFilter_Add_32Ux32U_32U_4_23_in2 + SobelFilter_Add_32Ux32U_32U_4_23_in1;
    
    // resource: mux_32bx4i0c
    always @(s_reg_18 or s_reg_22 or s_reg_32 or s_reg_33 or gs_ctrl_do_filter_he)
      begin : drive_SobelFilter_Mul_32Sx6S_32S_4_24_in2
        case (gs_ctrl_do_filter_he) 
          2'd1: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_24_in2 = s_reg_22;
            end
          2'd2: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_24_in2 = s_reg_32;
            end
          2'd3: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_24_in2 = s_reg_33;
            end
          default: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_24_in2 = s_reg_18;
            end
        endcase
      end
    
    // resource: mux_6bx4i4c
    always @(gs_ctrl_do_filter_he)
      begin : drive_SobelFilter_Mul_32Sx6S_32S_4_24_in1
        case (gs_ctrl_do_filter_he) 
          2'd1: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_24_in1 = 6'd52;
            end
          2'd2: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_24_in1 = 6'd51;
            end
          2'd3: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_24_in1 = 6'd45;
            end
          default: 
            begin
              SobelFilter_Mul_32Sx6S_32S_4_24_in1 = 6'd05;
            end
        endcase
      end
    
    // resource: SobelFilter_Mul_32Sx6S_32S_4  instance: SobelFilter_Mul_32Sx6S_32S_4_24
    assign SobelFilter_Mul_32Sx6S_32S_4_24_out1 = SobelFilter_Mul_32Sx6S_32S_4_24_in2 * {{ 26 {SobelFilter_Mul_32Sx6S_32S_4_24_in1[5]}}, SobelFilter_Mul_32Sx6S_32S_4_24_in1};
    
    // resource: mux_32bx2i0c
    always @(SobelFilter_Mul_32Sx6S_32S_4_24_out1 or SobelFilter_Mul_32Sx7U_32S_4_46_out1 or gs_ctrl_do_filter_hc)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_25_in2
        if (gs_ctrl_do_filter_hc) 
          begin
            SobelFilter_Add_32Ux32U_32U_4_25_in2 = SobelFilter_Mul_32Sx7U_32S_4_46_out1;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_4_25_in2 = SobelFilter_Mul_32Sx6S_32S_4_24_out1;
          end
      end
    
    // resource: mux_32bx2i0c
    always @(o_avg_data or SobelFilter_Add_32Ux32U_32U_4_23_out1 or gs_ctrl_do_filter_hc)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_25_in1
        if (gs_ctrl_do_filter_hc) 
          begin
            SobelFilter_Add_32Ux32U_32U_4_25_in1 = o_avg_data;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_4_25_in1 = SobelFilter_Add_32Ux32U_32U_4_23_out1;
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_25
    assign SobelFilter_Add_32Ux32U_32U_4_25_out1 = SobelFilter_Add_32Ux32U_32U_4_25_in2 + SobelFilter_Add_32Ux32U_32U_4_25_in1;
    
    // resource: mux_32bx4i0c
    always @(s_reg_21 or s_reg_34 or s_reg_40 or s_reg_43 or gs_ctrl_do_filter_he)
      begin : drive_SobelFilter_Mul_32Sx4U_32S_4_26_in2
        case (gs_ctrl_do_filter_he) 
          2'd1: 
            begin
              SobelFilter_Mul_32Sx4U_32S_4_26_in2 = s_reg_34;
            end
          2'd2: 
            begin
              SobelFilter_Mul_32Sx4U_32S_4_26_in2 = s_reg_40;
            end
          2'd3: 
            begin
              SobelFilter_Mul_32Sx4U_32S_4_26_in2 = s_reg_43;
            end
          default: 
            begin
              SobelFilter_Mul_32Sx4U_32S_4_26_in2 = s_reg_21;
            end
        endcase
      end
    
    // resource: mux_4bx2i2c
    always @(gs_ctrl_do_filter_hc)
      begin : drive_SobelFilter_Mul_32Sx4U_32S_4_26_in1
        if (gs_ctrl_do_filter_hc) 
          begin
            SobelFilter_Mul_32Sx4U_32S_4_26_in1 = 4'd05;
          end 
        else 
          begin
            SobelFilter_Mul_32Sx4U_32S_4_26_in1 = 4'd10;
          end
      end
    
    // resource: SobelFilter_Mul_32Sx4U_32S_4  instance: SobelFilter_Mul_32Sx4U_32S_4_26
    assign SobelFilter_Mul_32Sx4U_32S_4_26_out1 = SobelFilter_Mul_32Sx4U_32S_4_26_in2 * {28'b0000000000000000000000000000, SobelFilter_Mul_32Sx4U_32S_4_26_in1};
    
    // resource: mux_32bx3i0c
    always @(s_reg_23[29:0] or SobelFilter_Add_32Ux32U_32U_4_25_out1 or SobelFilter_Mul_32Sx6S_32S_4_44_out1 or gs_ctrl_do_filter_he1)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_27_in2
        case (gs_ctrl_do_filter_he1) 
          2'd1: 
            begin
              SobelFilter_Add_32Ux32U_32U_4_27_in2 = SobelFilter_Mul_32Sx6S_32S_4_44_out1;
            end
          2'd2: 
            begin
              SobelFilter_Add_32Ux32U_32U_4_27_in2 = SobelFilter_Add_32Ux32U_32U_4_25_out1;
            end
          default: 
            begin
              SobelFilter_Add_32Ux32U_32U_4_27_in2 = {s_reg_23[29:0], 2'd0};
            end
        endcase
      end
    
    // resource: mux_32bx2i0c
    always @(SobelFilter_Minus_32S_32S_1_7_out1 or SobelFilter_Add_32Ux32U_32U_4_25_out1 or gs_ctrl_do_filter_h4)
      begin : drive_SobelFilter_Add_32Ux32U_32U_4_27_in1
        if (gs_ctrl_do_filter_h4) 
          begin
            SobelFilter_Add_32Ux32U_32U_4_27_in1 = SobelFilter_Minus_32S_32S_1_7_out1;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_4_27_in1 = SobelFilter_Add_32Ux32U_32U_4_25_out1;
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_4  instance: SobelFilter_Add_32Ux32U_32U_4_27
    assign SobelFilter_Add_32Ux32U_32U_4_27_out1 = SobelFilter_Add_32Ux32U_32U_4_27_in2 + SobelFilter_Add_32Ux32U_32U_4_27_in1;
    
    // resource: mux_32bx4i0c
    always @(s_reg_22 or s_reg_37 or s_reg_38 or s_reg_44 or gs_ctrl_do_filter_he)
      begin : drive_SobelFilter_Mul_32Sx4S_32S_4_28_in2
        case (gs_ctrl_do_filter_he) 
          2'd1: 
            begin
              SobelFilter_Mul_32Sx4S_32S_4_28_in2 = s_reg_38;
            end
          2'd2: 
            begin
              SobelFilter_Mul_32Sx4S_32S_4_28_in2 = s_reg_44;
            end
          2'd3: 
            begin
              SobelFilter_Mul_32Sx4S_32S_4_28_in2 = s_reg_37;
            end
          default: 
            begin
              SobelFilter_Mul_32Sx4S_32S_4_28_in2 = s_reg_22;
            end
        endcase
      end
    
    // resource: mux_2bx2i2c
    always @(gs_ctrl_do_filter_h4)
      begin : drive_SobelFilter_Mul_32Sx4S_32S_4_28_in1_slice
        if (gs_ctrl_do_filter_h4) 
          begin
            SobelFilter_Mul_32Sx4S_32S_4_28_in1_slice = 2'd2;
          end 
        else 
          begin
            SobelFilter_Mul_32Sx4S_32S_4_28_in1_slice = 2'd1;
          end
      end
    
    // resource: SobelFilter_Mul_32Sx4S_32S_4  instance: SobelFilter_Mul_32Sx4S_32S_4_28
    assign SobelFilter_Mul_32Sx4S_32S_4_28_out1 = SobelFilter_Mul_32Sx4S_32S_4_28_in2 * {29'd536870911, {SobelFilter_Mul_32Sx4S_32S_4_28_in1_slice, 1'b1}};
    
    // resource: mux_32bx2i0c
    always @(s_reg_25 or s_reg_31 or gs_ctrl_do_filter_h8)
      begin : drive_SobelFilter_Mul_32Sx6S_32S_4_44_in2
        if (gs_ctrl_do_filter_h8) 
          begin
            SobelFilter_Mul_32Sx6S_32S_4_44_in2 = s_reg_31;
          end 
        else 
          begin
            SobelFilter_Mul_32Sx6S_32S_4_44_in2 = s_reg_25;
          end
      end
    
    // resource: mux_1bx2i2c
    always @(gs_ctrl_do_filter_h8)
      begin : drive_SobelFilter_Mul_32Sx6S_32S_4_44_in1_slice
        if (gs_ctrl_do_filter_h8) 
          begin
            SobelFilter_Mul_32Sx6S_32S_4_44_in1_slice = 1'b0;
          end 
        else 
          begin
            SobelFilter_Mul_32Sx6S_32S_4_44_in1_slice = 1'b1;
          end
      end
    
    // resource: SobelFilter_Mul_32Sx6S_32S_4  instance: SobelFilter_Mul_32Sx6S_32S_4_44
    assign SobelFilter_Mul_32Sx6S_32S_4_44_out1 = SobelFilter_Mul_32Sx6S_32S_4_44_in2 * {29'd536870909, {SobelFilter_Mul_32Sx6S_32S_4_44_in1_slice, {1'b0, SobelFilter_Mul_32Sx6S_32S_4_44_in1_slice}}};
    
    // resource: mux_32bx2i0c
    always @(SobelFilter_Add_32Ux32U_32U_1_20_out1 or SobelFilter_Mul_32Sx4S_32S_4_28_out1 or gs_ctrl_do_filter_h8)
      begin : drive_SobelFilter_Add_32Ux32U_32U_1_45_in2
        if (gs_ctrl_do_filter_h8) 
          begin
            SobelFilter_Add_32Ux32U_32U_1_45_in2 = SobelFilter_Mul_32Sx4S_32S_4_28_out1;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_1_45_in2 = SobelFilter_Add_32Ux32U_32U_1_20_out1;
          end
      end
    
    // resource: mux_32bx2i0c
    always @(SobelFilter_Minus_32S_32S_4_10_out1 or SobelFilter_Add_32Ux32U_32U_1_20_out1 or gs_ctrl_do_filter_h8)
      begin : drive_SobelFilter_Add_32Ux32U_32U_1_45_in1
        if (gs_ctrl_do_filter_h8) 
          begin
            SobelFilter_Add_32Ux32U_32U_1_45_in1 = SobelFilter_Add_32Ux32U_32U_1_20_out1;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_1_45_in1 = SobelFilter_Minus_32S_32S_4_10_out1;
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_1  instance: SobelFilter_Add_32Ux32U_32U_1_45
    assign SobelFilter_Add_32Ux32U_32U_1_45_out1 = SobelFilter_Add_32Ux32U_32U_1_45_in2 + SobelFilter_Add_32Ux32U_32U_1_45_in1;
    
    // resource: mux_32bx3i0c
    always @(s_reg_26 or s_reg_28 or s_reg_29 or gs_ctrl_do_filter_hc0)
      begin : drive_SobelFilter_Mul_32Sx7U_32S_4_46_in2
        case (gs_ctrl_do_filter_hc0) 
          2'd1: 
            begin
              SobelFilter_Mul_32Sx7U_32S_4_46_in2 = s_reg_28;
            end
          2'd2: 
            begin
              SobelFilter_Mul_32Sx7U_32S_4_46_in2 = s_reg_29;
            end
          default: 
            begin
              SobelFilter_Mul_32Sx7U_32S_4_46_in2 = s_reg_26;
            end
        endcase
      end
    
    // resource: mux_2bx2i2c
    always @(gs_ctrl_do_filter_h8)
      begin : drive_SobelFilter_Mul_32Sx7U_32S_4_46_in1_slice
        if (gs_ctrl_do_filter_h8) 
          begin
            SobelFilter_Mul_32Sx7U_32S_4_46_in1_slice = 2'd2;
          end 
        else 
          begin
            SobelFilter_Mul_32Sx7U_32S_4_46_in1_slice = 2'd1;
          end
      end
    
    // resource: SobelFilter_Mul_32Sx7U_32S_4  instance: SobelFilter_Mul_32Sx7U_32S_4_46
    assign SobelFilter_Mul_32Sx7U_32S_4_46_out1 = SobelFilter_Mul_32Sx7U_32S_4_46_in2 * {26'd00000001, {SobelFilter_Mul_32Sx7U_32S_4_46_in1_slice[1], {4'd03, SobelFilter_Mul_32Sx7U_32S_4_46_in1_slice[0]}}};
    
    // resource: mux_32bx3i0c
    always @(s_reg_58[29:0] or s_reg_83 or SobelFilter_Mul_32Sx7U_32S_4_46_out1 or gs_ctrl_do_filter_hc0)
      begin : drive_SobelFilter_Add_32Ux32U_32U_1_48_in2
        case (gs_ctrl_do_filter_hc0) 
          2'd1: 
            begin
              SobelFilter_Add_32Ux32U_32U_1_48_in2 = s_reg_83;
            end
          2'd2: 
            begin
              SobelFilter_Add_32Ux32U_32U_1_48_in2 = {s_reg_58[29:0], 2'd0};
            end
          default: 
            begin
              SobelFilter_Add_32Ux32U_32U_1_48_in2 = SobelFilter_Mul_32Sx7U_32S_4_46_out1;
            end
        endcase
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_1  instance: SobelFilter_Add_32Ux32U_32U_1_48
    assign SobelFilter_Add_32Ux32U_32U_1_48_out1 = SobelFilter_Add_32Ux32U_32U_1_48_in2 + SobelFilter_Add_32Ux32U_32U_1_45_out1;
    
    // resource: SobelFilter_Add_32Ux32U_32U_1  instance: SobelFilter_Add_32Ux32U_32U_1_65
    assign SobelFilter_Add_32Ux32U_32U_1_65_out1 = SobelFilter_Mul_32Sx4U_32S_4_26_out1 + SobelFilter_Add_32Ux32U_32U_1_48_out1;
    
    // resource: mux_32bx2i0c
    always @(s_reg_42[29:0] or SobelFilter_Add_32Ux32U_32U_1_65_out1 or gs_ctrl_do_filter_h8)
      begin : drive_SobelFilter_Add_32Ux32U_32U_1_66_in2
        if (gs_ctrl_do_filter_h8) 
          begin
            SobelFilter_Add_32Ux32U_32U_1_66_in2 = {s_reg_42[29:0], 2'd0};
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_1_66_in2 = SobelFilter_Add_32Ux32U_32U_1_65_out1;
          end
      end
    
    // resource: mux_32bx2i0c
    always @(SobelFilter_Minus_32S_32S_4_18_out1 or SobelFilter_Add_32Ux32U_32U_1_65_out1 or gs_ctrl_do_filter_h8)
      begin : drive_SobelFilter_Add_32Ux32U_32U_1_66_in1
        if (gs_ctrl_do_filter_h8) 
          begin
            SobelFilter_Add_32Ux32U_32U_1_66_in1 = SobelFilter_Add_32Ux32U_32U_1_65_out1;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_1_66_in1 = SobelFilter_Minus_32S_32S_4_18_out1;
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_1  instance: SobelFilter_Add_32Ux32U_32U_1_66
    assign SobelFilter_Add_32Ux32U_32U_1_66_out1 = SobelFilter_Add_32Ux32U_32U_1_66_in2 + SobelFilter_Add_32Ux32U_32U_1_66_in1;
    
    // resource: mux_32bx2i0c
    always @(s_reg_46[30:0] or SobelFilter_Mul_32Sx4S_32S_4_28_out1 or gs_ctrl_do_filter_h8)
      begin : drive_SobelFilter_Add_32Ux32U_32U_1_68_in2
        if (gs_ctrl_do_filter_h8) 
          begin
            SobelFilter_Add_32Ux32U_32U_1_68_in2 = {s_reg_46[30:0], 1'b0};
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_1_68_in2 = SobelFilter_Mul_32Sx4S_32S_4_28_out1;
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_1  instance: SobelFilter_Add_32Ux32U_32U_1_68
    assign SobelFilter_Add_32Ux32U_32U_1_68_out1 = SobelFilter_Add_32Ux32U_32U_1_68_in2 + SobelFilter_Add_32Ux32U_32U_1_66_out1;
    
    // resource: mux_32bx2i0c
    always @(SobelFilter_Mul_32Sx3U_32S_4_6_out1 or SobelFilter_Add_32Ux32U_32U_1_68_out1 or gs_ctrl_do_filter_h8)
      begin : drive_SobelFilter_Add_32Ux32U_32U_1_71_in2
        if (gs_ctrl_do_filter_h8) 
          begin
            SobelFilter_Add_32Ux32U_32U_1_71_in2 = SobelFilter_Add_32Ux32U_32U_1_68_out1;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_1_71_in2 = SobelFilter_Mul_32Sx3U_32S_4_6_out1;
          end
      end
    
    // resource: mux_32bx2i0c
    always @(SobelFilter_Minus_32S_32S_1_7_out1 or SobelFilter_Add_32Ux32U_32U_1_68_out1 or gs_ctrl_do_filter_h8)
      begin : drive_SobelFilter_Add_32Ux32U_32U_1_71_in1
        if (gs_ctrl_do_filter_h8) 
          begin
            SobelFilter_Add_32Ux32U_32U_1_71_in1 = SobelFilter_Minus_32S_32S_1_7_out1;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_1_71_in1 = SobelFilter_Add_32Ux32U_32U_1_68_out1;
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_1  instance: SobelFilter_Add_32Ux32U_32U_1_71
    assign SobelFilter_Add_32Ux32U_32U_1_71_out1 = SobelFilter_Add_32Ux32U_32U_1_71_in2 + SobelFilter_Add_32Ux32U_32U_1_71_in1;
    
    // resource: SobelFilter_Add_32Ux32U_32U_1  instance: SobelFilter_Add_32Ux32U_32U_1_72
    assign SobelFilter_Add_32Ux32U_32U_1_72_out1 = SobelFilter_Add_32Ux32U_32U_1_71_out1 + SobelFilter_Minus_32S_32S_4_8_out1;
    
    // resource: mux_32bx2i0c
    always @(SobelFilter_Mul_32Sx4S_32S_4_13_out1 or SobelFilter_Add_32Ux32U_32U_1_97_out1 or gs_ctrl_do_filter_h8)
      begin : drive_SobelFilter_Add_32Ux32U_32U_1_74_in2
        if (gs_ctrl_do_filter_h8) 
          begin
            SobelFilter_Add_32Ux32U_32U_1_74_in2 = SobelFilter_Add_32Ux32U_32U_1_97_out1;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_1_74_in2 = SobelFilter_Mul_32Sx4S_32S_4_13_out1;
          end
      end
    
    // resource: mux_32bx2i0c
    always @(SobelFilter_Minus_32S_32S_4_18_out1 or SobelFilter_Add_32Ux32U_32U_1_72_out1 or gs_ctrl_do_filter_h8)
      begin : drive_SobelFilter_Add_32Ux32U_32U_1_74_in1
        if (gs_ctrl_do_filter_h8) 
          begin
            SobelFilter_Add_32Ux32U_32U_1_74_in1 = SobelFilter_Minus_32S_32S_4_18_out1;
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_1_74_in1 = SobelFilter_Add_32Ux32U_32U_1_72_out1;
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_1  instance: SobelFilter_Add_32Ux32U_32U_1_74
    assign SobelFilter_Add_32Ux32U_32U_1_74_out1 = SobelFilter_Add_32Ux32U_32U_1_74_in2 + SobelFilter_Add_32Ux32U_32U_1_74_in1;
    
    // resource: mux_31bx2i0c
    always @(i_rgb_data[30:0] or s_reg_54[30:0] or gs_ctrl_do_filter_h8)
      begin : drive_SobelFilter_Add_32Ux32U_32U_1_75_in2_slice
        if (gs_ctrl_do_filter_h8) 
          begin
            SobelFilter_Add_32Ux32U_32U_1_75_in2_slice = s_reg_54[30:0];
          end 
        else 
          begin
            SobelFilter_Add_32Ux32U_32U_1_75_in2_slice = i_rgb_data[30:0];
          end
      end
    
    // resource: SobelFilter_Add_32Ux32U_32U_1  instance: SobelFilter_Add_32Ux32U_32U_1_75
    assign SobelFilter_Add_32Ux32U_32U_1_75_out1 = {SobelFilter_Add_32Ux32U_32U_1_75_in2_slice, 1'b0} + SobelFilter_Add_32Ux32U_32U_1_74_out1;
    
    // resource: SobelFilter_Add_32Ux32U_32U_1  instance: SobelFilter_Add_32Ux32U_32U_1_97
    assign SobelFilter_Add_32Ux32U_32U_1_97_out1 = SobelFilter_Add_32Ux32U_32U_1_72_out1 + SobelFilter_Minus_32S_32S_4_10_out1;
    
    // resource: regr_en_sc_3
    always @(posedge i_clk)
      begin : drive_global_state
        if (i_rst == 1'b0) 
          begin
            global_state <= 3'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  global_state <= global_state_next;
                end
            endcase
          end
      end
    
    // resource: mux_3bx2i1c
    always @(global_state)
      begin : drive_global_state_next
        case (global_state) 
          3'd0, 3'd4: 
            begin
              global_state_next = 3'd1;
            end
          default: 
            begin
              global_state_next = global_state + 3'd1;
            end
        endcase
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_en_sc_2
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h6
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h6 <= 2'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    3'd1: 
                      begin
                        gs_ctrl_do_filter_h6 <= 2'd1;
                      end
                    3'd2: 
                      begin
                        gs_ctrl_do_filter_h6 <= 2'd2;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h6 <= 2'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h2
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h2 <= 1'b0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    3'd1: 
                      begin
                        gs_ctrl_do_filter_h2 <= 1'b1;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h2 <= 1'b0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_2bx4i4c
    // resource: regr_en_sc_2
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_he
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_he <= 2'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    3'd1: 
                      begin
                        gs_ctrl_do_filter_he <= 2'd1;
                      end
                    3'd2: 
                      begin
                        gs_ctrl_do_filter_he <= 2'd2;
                      end
                    3'd3: 
                      begin
                        gs_ctrl_do_filter_he <= 2'd3;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_he <= 2'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_en_sc_2
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_he0
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_he0 <= 2'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    3'd1: 
                      begin
                        gs_ctrl_do_filter_he0 <= 2'd1;
                      end
                    3'd2, 3'd3: 
                      begin
                        gs_ctrl_do_filter_he0 <= 2'd2;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_he0 <= 2'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_hc
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_hc <= 1'b0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    3'd2, 3'd3: 
                      begin
                        gs_ctrl_do_filter_hc <= 1'b1;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_hc <= 1'b0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_en_sc_2
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_hc0
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_hc0 <= 2'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    3'd2: 
                      begin
                        gs_ctrl_do_filter_hc0 <= 2'd1;
                      end
                    3'd3: 
                      begin
                        gs_ctrl_do_filter_hc0 <= 2'd2;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_hc0 <= 2'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h4
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h4 <= 1'b0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    3'd2: 
                      begin
                        gs_ctrl_do_filter_h4 <= 1'b1;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h4 <= 1'b0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_2bx3i3c
    // resource: regr_en_sc_2
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_he1
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_he1 <= 2'd0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    3'd1, 3'd3: 
                      begin
                        gs_ctrl_do_filter_he1 <= 2'd1;
                      end
                    3'd2: 
                      begin
                        gs_ctrl_do_filter_he1 <= 2'd2;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_he1 <= 2'd0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // resource: mux_1bx2i2c
    // resource: regr_en_sc_1
    always @(posedge i_clk)
      begin : drive_gs_ctrl_do_filter_h8
        if (i_rst == 1'b0) 
          begin
            gs_ctrl_do_filter_h8 <= 1'b0;
          end 
        else 
          begin
            case (stall0) 
              1'b1: 
                begin
                end
              default: 
                begin
                  case (global_state_next) 
                    3'd3: 
                      begin
                        gs_ctrl_do_filter_h8 <= 1'b1;
                      end
                    default: 
                      begin
                        gs_ctrl_do_filter_h8 <= 1'b0;
                      end
                  endcase
                end
            endcase
          end
      end
    
    // instance: drive_i_rgb_busy
    assign i_rgb_busy = SobelFilter_gen_busy_r_4_102_out1[2];
    
    // resource: SobelFilter_gen_busy_r_4  instance: SobelFilter_gen_busy_r_4_102 (4 concurrent statements)
      assign SobelFilter_gen_busy_r_4_102_out1 = {SobelFilter_gen_busy_r_4_102_gnew_req, {SobelFilter_gen_busy_r_4_102_gdiv, SobelFilter_gen_busy_r_4_102_i_rgb_gen_busy_i_rgb_m_data_is_invalid_next}};
      assign SobelFilter_gen_busy_r_4_102_i_rgb_gen_busy_i_rgb_m_data_is_invalid_next = ~SobelFilter_gen_busy_r_4_102_gdiv;
      assign SobelFilter_gen_busy_r_4_102_gdiv = i_rgb_vld & !SobelFilter_gen_busy_r_4_102_gnew_req;
      assign SobelFilter_gen_busy_r_4_102_gnew_req = i_rgb_m_busy_req_0 & (i_rgb_m_unvalidated_req | i_rgb_vld);
    // (end of SobelFilter_gen_busy_r_4_102)
    
    // resource: regr_ss_1
    always @(posedge i_clk)
      begin : drive_i_rgb_m_unvalidated_req
        if (i_rst == 1'b0) 
          begin
            i_rgb_m_unvalidated_req <= 1'd1;
          end 
        else 
          begin
            i_rgb_m_unvalidated_req <= SobelFilter_N_Muxb_1_2_0_4_4_out1;
          end
      end
    
    // resource: SobelFilter_N_Muxb_1_2_0_4
    always @(i_rgb_vld or i_rgb_m_busy_req_0 or i_rgb_m_unvalidated_req)
      begin : SobelFilter_N_Muxb_1_2_0_4_4
        if (i_rgb_m_busy_req_0) 
          begin
            SobelFilter_N_Muxb_1_2_0_4_4_out1 = i_rgb_m_unvalidated_req;
          end 
        else 
          begin
            SobelFilter_N_Muxb_1_2_0_4_4_out1 = i_rgb_vld;
          end
      end
    
    // instance: drive_o_avg_vld
    assign o_avg_vld = SobelFilter_Or_1Ux1U_1U_4_2_out1;
    
    // resource: SobelFilter_Or_1Ux1U_1U_4  instance: SobelFilter_Or_1Ux1U_1U_4_2
    assign SobelFilter_Or_1Ux1U_1U_4_2_out1 = o_avg_m_unacked_req | SobelFilter_Xor_1Ux1U_1U_1_1_out1;
    
    // resource: regr_sc_1
    always @(posedge i_clk)
      begin : drive_o_avg_m_unacked_req
        if (i_rst == 1'b0) 
          begin
            o_avg_m_unacked_req <= 1'd0;
          end 
        else 
          begin
            o_avg_m_unacked_req <= SobelFilter_And_1Ux1U_1U_4_100_out1;
          end
      end
    
    // resource: SobelFilter_And_1Ux1U_1U_4  instance: SobelFilter_And_1Ux1U_1U_4_100
    assign SobelFilter_And_1Ux1U_1U_4_100_out1 = o_avg_busy & o_avg_vld;
    
    // resource: SobelFilter_Xor_1Ux1U_1U_1  instance: SobelFilter_Xor_1Ux1U_1U_1_1
    assign SobelFilter_Xor_1Ux1U_1U_1_1_out1 = o_avg_m_req_m_trig_req ^ o_avg_m_req_m_prev_trig_req;
    
    // resource: regr_sc_1
    always @(posedge i_clk)
      begin : drive_o_avg_m_req_m_prev_trig_req
        if (i_rst == 1'b0) 
          begin
            o_avg_m_req_m_prev_trig_req <= 1'd0;
          end 
        else 
          begin
            o_avg_m_req_m_prev_trig_req <= o_avg_m_req_m_trig_req;
          end
      end
    
    // resource: SobelFilter_Not_1U_1U_1  instance: SobelFilter_Not_1U_1U_1_3
    assign SobelFilter_Not_1U_1U_1_3_out1 = !o_avg_m_req_m_trig_req;

endmodule

